
summerschool_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005244  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005460  08005460  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005468  08005468  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000070  080054e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080054e0  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115e5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207a  00000000  00000000  00031685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00033700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824f  00000000  00000000  00035550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001284c  00000000  00000000  0004d79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c13a  00000000  00000000  0005ffeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004714  00000000  00000000  000fc178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053cc 	.word	0x080053cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080053cc 	.word	0x080053cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_ldivmod>:
 8000290:	b97b      	cbnz	r3, 80002b2 <__aeabi_ldivmod+0x22>
 8000292:	b972      	cbnz	r2, 80002b2 <__aeabi_ldivmod+0x22>
 8000294:	2900      	cmp	r1, #0
 8000296:	bfbe      	ittt	lt
 8000298:	2000      	movlt	r0, #0
 800029a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800029e:	e006      	blt.n	80002ae <__aeabi_ldivmod+0x1e>
 80002a0:	bf08      	it	eq
 80002a2:	2800      	cmpeq	r0, #0
 80002a4:	bf1c      	itt	ne
 80002a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002aa:	f04f 30ff 	movne.w	r0, #4294967295
 80002ae:	f000 b9bf 	b.w	8000630 <__aeabi_idiv0>
 80002b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ba:	2900      	cmp	r1, #0
 80002bc:	db09      	blt.n	80002d2 <__aeabi_ldivmod+0x42>
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db1a      	blt.n	80002f8 <__aeabi_ldivmod+0x68>
 80002c2:	f000 f84d 	bl	8000360 <__udivmoddi4>
 80002c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ce:	b004      	add	sp, #16
 80002d0:	4770      	bx	lr
 80002d2:	4240      	negs	r0, r0
 80002d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	db1b      	blt.n	8000314 <__aeabi_ldivmod+0x84>
 80002dc:	f000 f840 	bl	8000360 <__udivmoddi4>
 80002e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e8:	b004      	add	sp, #16
 80002ea:	4240      	negs	r0, r0
 80002ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f0:	4252      	negs	r2, r2
 80002f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002f6:	4770      	bx	lr
 80002f8:	4252      	negs	r2, r2
 80002fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fe:	f000 f82f 	bl	8000360 <__udivmoddi4>
 8000302:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030a:	b004      	add	sp, #16
 800030c:	4240      	negs	r0, r0
 800030e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000312:	4770      	bx	lr
 8000314:	4252      	negs	r2, r2
 8000316:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031a:	f000 f821 	bl	8000360 <__udivmoddi4>
 800031e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000326:	b004      	add	sp, #16
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <baro_init>:
static int16_t dig_T2, dig_T3, dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;
static int32_t t_fine;
static _Bool inited = false;
static uint8_t data[25];

baro_stat_t baro_init(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;

	// Check barometer on I2C bus
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_ID, I2C_MEMADD_SIZE_8BIT, data, 1, 1000);
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	2301      	movs	r3, #1
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	4b6f      	ldr	r3, [pc, #444]	; (8000804 <baro_init+0x1d0>)
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2301      	movs	r3, #1
 800064a:	22d0      	movs	r2, #208	; 0xd0
 800064c:	21ec      	movs	r1, #236	; 0xec
 800064e:	486e      	ldr	r0, [pc, #440]	; (8000808 <baro_init+0x1d4>)
 8000650:	f002 f8e2 	bl	8002818 <HAL_I2C_Mem_Read>
 8000654:	4603      	mov	r3, r0
 8000656:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <baro_init+0x38>
		if (status == HAL_TIMEOUT)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d101      	bne.n	8000668 <baro_init+0x34>
			return BARO_ERR_TIMEOUT;
 8000664:	2302      	movs	r3, #2
 8000666:	e0c9      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 8000668:	2301      	movs	r3, #1
 800066a:	e0c7      	b.n	80007fc <baro_init+0x1c8>
	}

	if (data[0] != BARO_ID_VALUE) {
 800066c:	4b65      	ldr	r3, [pc, #404]	; (8000804 <baro_init+0x1d0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b58      	cmp	r3, #88	; 0x58
 8000672:	d001      	beq.n	8000678 <baro_init+0x44>
		return BARO_ERR_GENERAL;
 8000674:	2303      	movs	r3, #3
 8000676:	e0c1      	b.n	80007fc <baro_init+0x1c8>
	}

	// Config barometer
	// T and P oversampling - 16, Normal mode
	// SPI 3 wire Off, Filter 2x, Standby duration - 62.5 ms
	data[0] = BARO_MODE_NORMAL | BARO_OSRS_T_1 | BARO_OSRS_P_1;
 8000678:	4b62      	ldr	r3, [pc, #392]	; (8000804 <baro_init+0x1d0>)
 800067a:	2227      	movs	r2, #39	; 0x27
 800067c:	701a      	strb	r2, [r3, #0]
	data[1] = BARO_SPI3W_OFF | BARO_FILTER_OFF | BARO_T_SB_0_5;
 800067e:	4b61      	ldr	r3, [pc, #388]	; (8000804 <baro_init+0x1d0>)
 8000680:	2200      	movs	r2, #0
 8000682:	705a      	strb	r2, [r3, #1]

	status = HAL_I2C_Mem_Write(&hi2c1, BARO_I2C_ADDR, BARO_REG_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, data, 2, 1000);
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2302      	movs	r3, #2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <baro_init+0x1d0>)
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2301      	movs	r3, #1
 8000694:	22f4      	movs	r2, #244	; 0xf4
 8000696:	21ec      	movs	r1, #236	; 0xec
 8000698:	485b      	ldr	r0, [pc, #364]	; (8000808 <baro_init+0x1d4>)
 800069a:	f001 ffc3 	bl	8002624 <HAL_I2C_Mem_Write>
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d006      	beq.n	80006b6 <baro_init+0x82>
		if (status == HAL_TIMEOUT)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d101      	bne.n	80006b2 <baro_init+0x7e>
			return BARO_ERR_TIMEOUT;
 80006ae:	2302      	movs	r3, #2
 80006b0:	e0a4      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e0a2      	b.n	80007fc <baro_init+0x1c8>
	}

	// Readout compensation values
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_CALIB00, I2C_MEMADD_SIZE_8BIT, data, 25, 1000);
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	2319      	movs	r3, #25
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	4b50      	ldr	r3, [pc, #320]	; (8000804 <baro_init+0x1d0>)
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	2288      	movs	r2, #136	; 0x88
 80006c8:	21ec      	movs	r1, #236	; 0xec
 80006ca:	484f      	ldr	r0, [pc, #316]	; (8000808 <baro_init+0x1d4>)
 80006cc:	f002 f8a4 	bl	8002818 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <baro_init+0xb4>
		if (status == HAL_TIMEOUT)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b03      	cmp	r3, #3
 80006de:	d101      	bne.n	80006e4 <baro_init+0xb0>
			return BARO_ERR_TIMEOUT;
 80006e0:	2302      	movs	r3, #2
 80006e2:	e08b      	b.n	80007fc <baro_init+0x1c8>
		else
			return BARO_ERR_IO;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e089      	b.n	80007fc <baro_init+0x1c8>
	}
	dig_T1 = (uint16_t)data [1] << 8 | (uint16_t)data [0];
 80006e8:	4b46      	ldr	r3, [pc, #280]	; (8000804 <baro_init+0x1d0>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	021b      	lsls	r3, r3, #8
 80006ee:	b21a      	sxth	r2, r3
 80006f0:	4b44      	ldr	r3, [pc, #272]	; (8000804 <baro_init+0x1d0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	4313      	orrs	r3, r2
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	4b43      	ldr	r3, [pc, #268]	; (800080c <baro_init+0x1d8>)
 80006fe:	801a      	strh	r2, [r3, #0]
	dig_T2 =  (int16_t)data [3] << 8 |  (int16_t)data [2];
 8000700:	4b40      	ldr	r3, [pc, #256]	; (8000804 <baro_init+0x1d0>)
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	021b      	lsls	r3, r3, #8
 8000706:	b21a      	sxth	r2, r3
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <baro_init+0x1d0>)
 800070a:	789b      	ldrb	r3, [r3, #2]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21a      	sxth	r2, r3
 8000712:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <baro_init+0x1dc>)
 8000714:	801a      	strh	r2, [r3, #0]
	dig_T3 =  (int16_t)data [5] << 8 |  (int16_t)data [4];
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <baro_init+0x1d0>)
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	021b      	lsls	r3, r3, #8
 800071c:	b21a      	sxth	r2, r3
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <baro_init+0x1d0>)
 8000720:	791b      	ldrb	r3, [r3, #4]
 8000722:	b21b      	sxth	r3, r3
 8000724:	4313      	orrs	r3, r2
 8000726:	b21a      	sxth	r2, r3
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <baro_init+0x1e0>)
 800072a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (uint16_t)data [7] << 8 | (uint16_t)data [6];
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <baro_init+0x1d0>)
 800072e:	79db      	ldrb	r3, [r3, #7]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21a      	sxth	r2, r3
 8000734:	4b33      	ldr	r3, [pc, #204]	; (8000804 <baro_init+0x1d0>)
 8000736:	799b      	ldrb	r3, [r3, #6]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b35      	ldr	r3, [pc, #212]	; (8000818 <baro_init+0x1e4>)
 8000742:	801a      	strh	r2, [r3, #0]
	dig_P2 =  (int16_t)data [9] << 8 |  (int16_t)data [8];
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <baro_init+0x1d0>)
 8000746:	7a5b      	ldrb	r3, [r3, #9]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <baro_init+0x1d0>)
 800074e:	7a1b      	ldrb	r3, [r3, #8]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21a      	sxth	r2, r3
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <baro_init+0x1e8>)
 8000758:	801a      	strh	r2, [r3, #0]
	dig_P3 =  (int16_t)data[11] << 8 |  (int16_t)data[10];
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <baro_init+0x1d0>)
 800075c:	7adb      	ldrb	r3, [r3, #11]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b21a      	sxth	r2, r3
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <baro_init+0x1d0>)
 8000764:	7a9b      	ldrb	r3, [r3, #10]
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b21a      	sxth	r2, r3
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <baro_init+0x1ec>)
 800076e:	801a      	strh	r2, [r3, #0]
	dig_P4 =  (int16_t)data[13] << 8 |  (int16_t)data[12];
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <baro_init+0x1d0>)
 8000772:	7b5b      	ldrb	r3, [r3, #13]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21a      	sxth	r2, r3
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <baro_init+0x1d0>)
 800077a:	7b1b      	ldrb	r3, [r3, #12]
 800077c:	b21b      	sxth	r3, r3
 800077e:	4313      	orrs	r3, r2
 8000780:	b21a      	sxth	r2, r3
 8000782:	4b28      	ldr	r3, [pc, #160]	; (8000824 <baro_init+0x1f0>)
 8000784:	801a      	strh	r2, [r3, #0]
	dig_P5 =  (int16_t)data[15] << 8 |  (int16_t)data[14];
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <baro_init+0x1d0>)
 8000788:	7bdb      	ldrb	r3, [r3, #15]
 800078a:	021b      	lsls	r3, r3, #8
 800078c:	b21a      	sxth	r2, r3
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <baro_init+0x1d0>)
 8000790:	7b9b      	ldrb	r3, [r3, #14]
 8000792:	b21b      	sxth	r3, r3
 8000794:	4313      	orrs	r3, r2
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <baro_init+0x1f4>)
 800079a:	801a      	strh	r2, [r3, #0]
	dig_P6 =  (int16_t)data[17] << 8 |  (int16_t)data[16];
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <baro_init+0x1d0>)
 800079e:	7c5b      	ldrb	r3, [r3, #17]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b21a      	sxth	r2, r3
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <baro_init+0x1d0>)
 80007a6:	7c1b      	ldrb	r3, [r3, #16]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <baro_init+0x1f8>)
 80007b0:	801a      	strh	r2, [r3, #0]
	dig_P7 =  (int16_t)data[19] << 8 |  (int16_t)data[18];
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <baro_init+0x1d0>)
 80007b4:	7cdb      	ldrb	r3, [r3, #19]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <baro_init+0x1d0>)
 80007bc:	7c9b      	ldrb	r3, [r3, #18]
 80007be:	b21b      	sxth	r3, r3
 80007c0:	4313      	orrs	r3, r2
 80007c2:	b21a      	sxth	r2, r3
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <baro_init+0x1fc>)
 80007c6:	801a      	strh	r2, [r3, #0]
	dig_P8 =  (int16_t)data[21] << 8 |  (int16_t)data[20];
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <baro_init+0x1d0>)
 80007ca:	7d5b      	ldrb	r3, [r3, #21]
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <baro_init+0x1d0>)
 80007d2:	7d1b      	ldrb	r3, [r3, #20]
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b21a      	sxth	r2, r3
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <baro_init+0x200>)
 80007dc:	801a      	strh	r2, [r3, #0]
	dig_P9 =  (int16_t)data[23] << 8 |  (int16_t)data[22];
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <baro_init+0x1d0>)
 80007e0:	7ddb      	ldrb	r3, [r3, #23]
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <baro_init+0x1d0>)
 80007e8:	7d9b      	ldrb	r3, [r3, #22]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	4313      	orrs	r3, r2
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <baro_init+0x204>)
 80007f2:	801a      	strh	r2, [r3, #0]

	inited = true;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <baro_init+0x208>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]

	return BARO_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000ac 	.word	0x200000ac
 8000808:	20000110 	.word	0x20000110
 800080c:	2000008c 	.word	0x2000008c
 8000810:	20000090 	.word	0x20000090
 8000814:	20000092 	.word	0x20000092
 8000818:	2000008e 	.word	0x2000008e
 800081c:	20000094 	.word	0x20000094
 8000820:	20000096 	.word	0x20000096
 8000824:	20000098 	.word	0x20000098
 8000828:	2000009a 	.word	0x2000009a
 800082c:	2000009c 	.word	0x2000009c
 8000830:	2000009e 	.word	0x2000009e
 8000834:	200000a0 	.word	0x200000a0
 8000838:	200000a2 	.word	0x200000a2
 800083c:	200000a8 	.word	0x200000a8

08000840 <baro_read_temp>:

int32_t baro_read_temp(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af04      	add	r7, sp, #16
	int32_t var1, var2, temp;

	if (!inited)
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <baro_read_temp+0xc4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	f083 0301 	eor.w	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <baro_read_temp+0x1a>
		return INT32_MAX;
 8000854:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000858:	e050      	b.n	80008fc <baro_read_temp+0xbc>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	2303      	movs	r3, #3
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <baro_read_temp+0xc8>)
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	22fa      	movs	r2, #250	; 0xfa
 800086c:	21ec      	movs	r1, #236	; 0xec
 800086e:	4827      	ldr	r0, [pc, #156]	; (800090c <baro_read_temp+0xcc>)
 8000870:	f001 ffd2 	bl	8002818 <HAL_I2C_Mem_Read>
 8000874:	4603      	mov	r3, r0
 8000876:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <baro_read_temp+0x44>
		return INT32_MAX;
 800087e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000882:	e03b      	b.n	80008fc <baro_read_temp+0xbc>
	}
	int32_t adc_T = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <baro_read_temp+0xc8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	031a      	lsls	r2, r3, #12
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <baro_read_temp+0xc8>)
 800088c:	785b      	ldrb	r3, [r3, #1]
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	4313      	orrs	r3, r2
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <baro_read_temp+0xc8>)
 8000894:	7892      	ldrb	r2, [r2, #2]
 8000896:	0912      	lsrs	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	4313      	orrs	r3, r2
 800089c:	613b      	str	r3, [r7, #16]

	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	10da      	asrs	r2, r3, #3
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <baro_read_temp+0xd0>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	1ad3      	subs	r3, r2, r3
		   ((int32_t)dig_T2)) >> 11;
 80008aa:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <baro_read_temp+0xd4>)
 80008ac:	f9b2 2000 	ldrsh.w	r2, [r2]
	var1 = ((((adc_T >> 3) - ((int32_t)dig_T1 << 1))) *
 80008b0:	fb02 f303 	mul.w	r3, r2, r3
 80008b4:	12db      	asrs	r3, r3, #11
 80008b6:	60fb      	str	r3, [r7, #12]

	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	111b      	asrs	r3, r3, #4
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <baro_read_temp+0xd0>)
 80008be:	8812      	ldrh	r2, [r2, #0]
 80008c0:	1a9b      	subs	r3, r3, r2
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	1112      	asrs	r2, r2, #4
 80008c6:	4912      	ldr	r1, [pc, #72]	; (8000910 <baro_read_temp+0xd0>)
 80008c8:	8809      	ldrh	r1, [r1, #0]
 80008ca:	1a52      	subs	r2, r2, r1
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008cc:	fb02 f303 	mul.w	r3, r2, r3
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008d0:	131b      	asrs	r3, r3, #12
		      ((int32_t)dig_T3)) >> 14;
 80008d2:	4a11      	ldr	r2, [pc, #68]	; (8000918 <baro_read_temp+0xd8>)
 80008d4:	f9b2 2000 	ldrsh.w	r2, [r2]
			  ((adc_T >> 4) - ((int32_t)dig_T1))) >> 12) *
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_T >> 4) - ((int32_t)dig_T1)) *
 80008dc:	139b      	asrs	r3, r3, #14
 80008de:	60bb      	str	r3, [r7, #8]

	t_fine = var1 + var2;
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <baro_read_temp+0xdc>)
 80008e8:	6013      	str	r3, [r2, #0]

	temp = (t_fine * 5 + 128) >> 8;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <baro_read_temp+0xdc>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	3380      	adds	r3, #128	; 0x80
 80008f6:	121b      	asrs	r3, r3, #8
 80008f8:	607b      	str	r3, [r7, #4]

	return temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200000a8 	.word	0x200000a8
 8000908:	200000ac 	.word	0x200000ac
 800090c:	20000110 	.word	0x20000110
 8000910:	2000008c 	.word	0x2000008c
 8000914:	20000090 	.word	0x20000090
 8000918:	20000092 	.word	0x20000092
 800091c:	200000a4 	.word	0x200000a4

08000920 <baro_read_press>:

uint32_t baro_read_press(void) {
 8000920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000924:	b0d0      	sub	sp, #320	; 0x140
 8000926:	af04      	add	r7, sp, #16
	int64_t var1, var2, p;

	if (!inited)
 8000928:	4bc6      	ldr	r3, [pc, #792]	; (8000c44 <baro_read_press+0x324>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	f083 0301 	eor.w	r3, r3, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <baro_read_press+0x1c>
		return INT32_MAX;
 8000936:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800093a:	e2f6      	b.n	8000f2a <baro_read_press+0x60a>

	if (baro_read_temp() == INT32_MAX)
 800093c:	f7ff ff80 	bl	8000840 <baro_read_temp>
 8000940:	4602      	mov	r2, r0
 8000942:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000946:	429a      	cmp	r2, r3
 8000948:	d102      	bne.n	8000950 <baro_read_press+0x30>
		return UINT32_MAX;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e2ec      	b.n	8000f2a <baro_read_press+0x60a>

	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, BARO_I2C_ADDR, BARO_REG_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, data, 3, 1000);
 8000950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	2303      	movs	r3, #3
 8000958:	9301      	str	r3, [sp, #4]
 800095a:	4bbb      	ldr	r3, [pc, #748]	; (8000c48 <baro_read_press+0x328>)
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	22f7      	movs	r2, #247	; 0xf7
 8000962:	21ec      	movs	r1, #236	; 0xec
 8000964:	48b9      	ldr	r0, [pc, #740]	; (8000c4c <baro_read_press+0x32c>)
 8000966:	f001 ff57 	bl	8002818 <HAL_I2C_Mem_Read>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (status != HAL_OK) {
 8000970:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <baro_read_press+0x5e>
		return INT32_MAX;
 8000978:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800097c:	e2d5      	b.n	8000f2a <baro_read_press+0x60a>
	}
	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800097e:	4bb2      	ldr	r3, [pc, #712]	; (8000c48 <baro_read_press+0x328>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	031a      	lsls	r2, r3, #12
 8000984:	4bb0      	ldr	r3, [pc, #704]	; (8000c48 <baro_read_press+0x328>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	431a      	orrs	r2, r3
 800098c:	4bae      	ldr	r3, [pc, #696]	; (8000c48 <baro_read_press+0x328>)
 800098e:	789b      	ldrb	r3, [r3, #2]
 8000990:	091b      	lsrs	r3, r3, #4
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	var1 = ((int64_t)t_fine) - 128000;
 800099a:	4bad      	ldr	r3, [pc, #692]	; (8000c50 <baro_read_press+0x330>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	17da      	asrs	r2, r3, #31
 80009a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80009a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80009a8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80009ac:	460b      	mov	r3, r1
 80009ae:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80009b2:	653b      	str	r3, [r7, #80]	; 0x50
 80009b4:	4613      	mov	r3, r2
 80009b6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
 80009bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80009c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009c4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009cc:	fb03 f102 	mul.w	r1, r3, r2
 80009d0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80009d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009d8:	fb02 f303 	mul.w	r3, r2, r3
 80009dc:	18ca      	adds	r2, r1, r3
 80009de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009e2:	fba3 4503 	umull	r4, r5, r3, r3
 80009e6:	1953      	adds	r3, r2, r5
 80009e8:	461d      	mov	r5, r3
 80009ea:	4b9a      	ldr	r3, [pc, #616]	; (8000c54 <baro_read_press+0x334>)
 80009ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	17da      	asrs	r2, r3, #31
 80009f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80009f8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80009fc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000a00:	4603      	mov	r3, r0
 8000a02:	fb03 f205 	mul.w	r2, r3, r5
 8000a06:	460b      	mov	r3, r1
 8000a08:	fb04 f303 	mul.w	r3, r4, r3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4602      	mov	r2, r0
 8000a10:	fba4 8902 	umull	r8, r9, r4, r2
 8000a14:	444b      	add	r3, r9
 8000a16:	4699      	mov	r9, r3
 8000a18:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8000a1c:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 8000a20:	4b8d      	ldr	r3, [pc, #564]	; (8000c58 <baro_read_press+0x338>)
 8000a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	17da      	asrs	r2, r3, #31
 8000a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a2e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000a32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a36:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8000a3a:	462a      	mov	r2, r5
 8000a3c:	fb02 f203 	mul.w	r2, r2, r3
 8000a40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a44:	4621      	mov	r1, r4
 8000a46:	fb01 f303 	mul.w	r3, r1, r3
 8000a4a:	441a      	add	r2, r3
 8000a4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a50:	4621      	mov	r1, r4
 8000a52:	fba3 ab01 	umull	sl, fp, r3, r1
 8000a56:	eb02 030b 	add.w	r3, r2, fp
 8000a5a:	469b      	mov	fp, r3
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	f04f 0100 	mov.w	r1, #0
 8000a64:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000a68:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000a6c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000a70:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000a74:	1814      	adds	r4, r2, r0
 8000a76:	64bc      	str	r4, [r7, #72]	; 0x48
 8000a78:	414b      	adcs	r3, r1
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a7c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000a80:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4) << 35);
 8000a84:	4b75      	ldr	r3, [pc, #468]	; (8000c5c <baro_read_press+0x33c>)
 8000a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	17da      	asrs	r2, r3, #31
 8000a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000a92:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	f04f 0100 	mov.w	r1, #0
 8000a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000aa2:	00d9      	lsls	r1, r3, #3
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000aaa:	1814      	adds	r4, r2, r0
 8000aac:	643c      	str	r4, [r7, #64]	; 0x40
 8000aae:	414b      	adcs	r3, r1
 8000ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ab2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000ab6:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8000aba:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000abe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ac2:	fb03 f102 	mul.w	r1, r3, r2
 8000ac6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000aca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ace:	fb02 f303 	mul.w	r3, r2, r3
 8000ad2:	18ca      	adds	r2, r1, r3
 8000ad4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ad8:	fba3 1303 	umull	r1, r3, r3, r3
 8000adc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000af0:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <baro_read_press+0x340>)
 8000af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	17da      	asrs	r2, r3, #31
 8000afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000afe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000b02:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8000b06:	462b      	mov	r3, r5
 8000b08:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	fb02 f203 	mul.w	r2, r2, r3
 8000b12:	464b      	mov	r3, r9
 8000b14:	4621      	mov	r1, r4
 8000b16:	fb01 f303 	mul.w	r3, r1, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4622      	mov	r2, r4
 8000b1e:	4641      	mov	r1, r8
 8000b20:	fba2 1201 	umull	r1, r2, r2, r1
 8000b24:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8000b28:	460a      	mov	r2, r1
 8000b2a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8000b2e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000b32:	4413      	add	r3, r2
 8000b34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	f04f 0100 	mov.w	r1, #0
 8000b40:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8000b44:	4623      	mov	r3, r4
 8000b46:	0a18      	lsrs	r0, r3, #8
 8000b48:	462b      	mov	r3, r5
 8000b4a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000b4e:	462b      	mov	r3, r5
 8000b50:	1219      	asrs	r1, r3, #8
		   ((var1 * (int64_t)dig_P2) << 12);
 8000b52:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <baro_read_press+0x344>)
 8000b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b58:	b21b      	sxth	r3, r3
 8000b5a:	17da      	asrs	r2, r3, #31
 8000b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000b64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b68:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8000b6c:	464a      	mov	r2, r9
 8000b6e:	fb02 f203 	mul.w	r2, r2, r3
 8000b72:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b76:	4644      	mov	r4, r8
 8000b78:	fb04 f303 	mul.w	r3, r4, r3
 8000b7c:	441a      	add	r2, r3
 8000b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b82:	4644      	mov	r4, r8
 8000b84:	fba3 4304 	umull	r4, r3, r3, r4
 8000b88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b8c:	4623      	mov	r3, r4
 8000b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b96:	18d3      	adds	r3, r2, r3
 8000b98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8000ba8:	464c      	mov	r4, r9
 8000baa:	0323      	lsls	r3, r4, #12
 8000bac:	4644      	mov	r4, r8
 8000bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000bb2:	4644      	mov	r4, r8
 8000bb4:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) +
 8000bb6:	1884      	adds	r4, r0, r2
 8000bb8:	63bc      	str	r4, [r7, #56]	; 0x38
 8000bba:	eb41 0303 	adc.w	r3, r1, r3
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bc0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8000bc4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 8000bc8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000bcc:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8000bd0:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 8000bd4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <baro_read_press+0x348>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	2200      	movs	r2, #0
 8000be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000be4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000be8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8000bec:	462b      	mov	r3, r5
 8000bee:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	fb02 f203 	mul.w	r2, r2, r3
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	4622      	mov	r2, r4
 8000c04:	4641      	mov	r1, r8
 8000c06:	fba2 1201 	umull	r1, r2, r2, r1
 8000c0a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000c0e:	460a      	mov	r2, r1
 8000c10:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8000c14:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000c18:	4413      	add	r3, r2
 8000c1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	104a      	asrs	r2, r1, #1
 8000c2e:	4629      	mov	r1, r5
 8000c30:	17cb      	asrs	r3, r1, #31
 8000c32:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	if (var1 == 0) {
 8000c36:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	d116      	bne.n	8000c6c <baro_read_press+0x34c>
		return 0; // avoid exception caused by division by zero
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e173      	b.n	8000f2a <baro_read_press+0x60a>
 8000c42:	bf00      	nop
 8000c44:	200000a8 	.word	0x200000a8
 8000c48:	200000ac 	.word	0x200000ac
 8000c4c:	20000110 	.word	0x20000110
 8000c50:	200000a4 	.word	0x200000a4
 8000c54:	2000009c 	.word	0x2000009c
 8000c58:	2000009a 	.word	0x2000009a
 8000c5c:	20000098 	.word	0x20000098
 8000c60:	20000096 	.word	0x20000096
 8000c64:	20000094 	.word	0x20000094
 8000c68:	2000008e 	.word	0x2000008e
	}
	p = 1048576 - adc_P;
 8000c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000c70:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000c74:	17da      	asrs	r2, r3, #31
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
 8000c78:	637a      	str	r2, [r7, #52]	; 0x34
 8000c7a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000c7e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p << 31) - var2) * 3125) / var1;
 8000c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c86:	105b      	asrs	r3, r3, #1
 8000c88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000c8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c90:	07db      	lsls	r3, r3, #31
 8000c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000c96:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000c9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	1a89      	subs	r1, r1, r2
 8000ca2:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000ca6:	4629      	mov	r1, r5
 8000ca8:	eb61 0303 	sbc.w	r3, r1, r3
 8000cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000cb0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000cb4:	4622      	mov	r2, r4
 8000cb6:	462b      	mov	r3, r5
 8000cb8:	1891      	adds	r1, r2, r2
 8000cba:	62b9      	str	r1, [r7, #40]	; 0x28
 8000cbc:	415b      	adcs	r3, r3
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000cc4:	4621      	mov	r1, r4
 8000cc6:	1851      	adds	r1, r2, r1
 8000cc8:	6239      	str	r1, [r7, #32]
 8000cca:	4629      	mov	r1, r5
 8000ccc:	414b      	adcs	r3, r1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd0:	f04f 0200 	mov.w	r2, #0
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000cdc:	4649      	mov	r1, r9
 8000cde:	018b      	lsls	r3, r1, #6
 8000ce0:	4641      	mov	r1, r8
 8000ce2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	018a      	lsls	r2, r1, #6
 8000cea:	4641      	mov	r1, r8
 8000cec:	1889      	adds	r1, r1, r2
 8000cee:	61b9      	str	r1, [r7, #24]
 8000cf0:	4649      	mov	r1, r9
 8000cf2:	eb43 0101 	adc.w	r1, r3, r1
 8000cf6:	61f9      	str	r1, [r7, #28]
 8000cf8:	f04f 0200 	mov.w	r2, #0
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d04:	4649      	mov	r1, r9
 8000d06:	008b      	lsls	r3, r1, #2
 8000d08:	4641      	mov	r1, r8
 8000d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d0e:	4641      	mov	r1, r8
 8000d10:	008a      	lsls	r2, r1, #2
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	4622      	mov	r2, r4
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	462a      	mov	r2, r5
 8000d22:	eb42 0303 	adc.w	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	008b      	lsls	r3, r1, #2
 8000d38:	4641      	mov	r1, r8
 8000d3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d3e:	4641      	mov	r1, r8
 8000d40:	008a      	lsls	r2, r1, #2
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	4603      	mov	r3, r0
 8000d48:	4622      	mov	r2, r4
 8000d4a:	189b      	adds	r3, r3, r2
 8000d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d50:	462b      	mov	r3, r5
 8000d52:	460a      	mov	r2, r1
 8000d54:	eb42 0303 	adc.w	r3, r2, r3
 8000d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000d60:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000d64:	f7ff fa94 	bl	8000290 <__aeabi_ldivmod>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000d70:	4b71      	ldr	r3, [pc, #452]	; (8000f38 <baro_read_press+0x618>)
 8000d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	17da      	asrs	r2, r3, #31
 8000d7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d7c:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d7e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	f04f 0100 	mov.w	r1, #0
 8000d8a:	0b50      	lsrs	r0, r2, #13
 8000d8c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000d90:	1359      	asrs	r1, r3, #13
 8000d92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8000d96:	462b      	mov	r3, r5
 8000d98:	fb00 f203 	mul.w	r2, r0, r3
 8000d9c:	4623      	mov	r3, r4
 8000d9e:	fb03 f301 	mul.w	r3, r3, r1
 8000da2:	4413      	add	r3, r2
 8000da4:	4622      	mov	r2, r4
 8000da6:	fba2 1200 	umull	r1, r2, r2, r0
 8000daa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000dae:	460a      	mov	r2, r1
 8000db0:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8000db4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000db8:	4413      	add	r3, r2
 8000dba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8000df4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000dfe:	f04f 0200 	mov.w	r2, #0
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	0e4a      	lsrs	r2, r1, #25
 8000e0e:	4629      	mov	r1, r5
 8000e10:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e14:	4629      	mov	r1, r5
 8000e16:	164b      	asrs	r3, r1, #25
 8000e18:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e1c:	4b47      	ldr	r3, [pc, #284]	; (8000f3c <baro_read_press+0x61c>)
 8000e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	17da      	asrs	r2, r3, #31
 8000e26:	673b      	str	r3, [r7, #112]	; 0x70
 8000e28:	677a      	str	r2, [r7, #116]	; 0x74
 8000e2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e2e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8000e32:	462a      	mov	r2, r5
 8000e34:	fb02 f203 	mul.w	r2, r2, r3
 8000e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	fb01 f303 	mul.w	r3, r1, r3
 8000e42:	441a      	add	r2, r3
 8000e44:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000e48:	4621      	mov	r1, r4
 8000e4a:	fba3 1301 	umull	r1, r3, r3, r1
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e52:	460b      	mov	r3, r1
 8000e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000e5c:	18d3      	adds	r3, r2, r3
 8000e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8000e6e:	4621      	mov	r1, r4
 8000e70:	0cca      	lsrs	r2, r1, #19
 8000e72:	4629      	mov	r1, r5
 8000e74:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000e78:	4629      	mov	r1, r5
 8000e7a:	14cb      	asrs	r3, r1, #19
 8000e7c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 8000e80:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8000e84:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8000e88:	1884      	adds	r4, r0, r2
 8000e8a:	66bc      	str	r4, [r7, #104]	; 0x68
 8000e8c:	eb41 0303 	adc.w	r3, r1, r3
 8000e90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e92:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8000e96:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	1889      	adds	r1, r1, r2
 8000e9e:	6639      	str	r1, [r7, #96]	; 0x60
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	eb43 0101 	adc.w	r1, r3, r1
 8000ea6:	6679      	str	r1, [r7, #100]	; 0x64
 8000ea8:	f04f 0000 	mov.w	r0, #0
 8000eac:	f04f 0100 	mov.w	r1, #0
 8000eb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8000eb4:	4623      	mov	r3, r4
 8000eb6:	0a18      	lsrs	r0, r3, #8
 8000eb8:	462b      	mov	r3, r5
 8000eba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ebe:	462b      	mov	r3, r5
 8000ec0:	1219      	asrs	r1, r3, #8
 8000ec2:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <baro_read_press+0x620>)
 8000ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	17da      	asrs	r2, r3, #31
 8000ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ece:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	f04f 0300 	mov.w	r3, #0
 8000ed8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8000edc:	464c      	mov	r4, r9
 8000ede:	0123      	lsls	r3, r4, #4
 8000ee0:	4644      	mov	r4, r8
 8000ee2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000ee6:	4644      	mov	r4, r8
 8000ee8:	0122      	lsls	r2, r4, #4
 8000eea:	1884      	adds	r4, r0, r2
 8000eec:	60bc      	str	r4, [r7, #8]
 8000eee:	eb41 0303 	adc.w	r3, r1, r3
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ef8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return p / 256;
 8000efc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da07      	bge.n	8000f14 <baro_read_press+0x5f4>
 8000f04:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	f143 0300 	adc.w	r3, r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	f04f 0100 	mov.w	r1, #0
 8000f1c:	0a10      	lsrs	r0, r2, #8
 8000f1e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f22:	1219      	asrs	r1, r3, #8
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4613      	mov	r3, r2

}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000f30:	46bd      	mov	sp, r7
 8000f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f36:	bf00      	nop
 8000f38:	200000a2 	.word	0x200000a2
 8000f3c:	200000a0 	.word	0x200000a0
 8000f40:	2000009e 	.word	0x2000009e

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	 uint32_t cnt = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fc7d 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f86d 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 f9dd 	bl	8001314 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f5a:	f000 f8d3 	bl	8001104 <MX_ADC1_Init>
  MX_TIM9_Init();
 8000f5e:	f000 f951 	bl	8001204 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000f62:	f000 f989 	bl	8001278 <MX_TIM10_Init>
  MX_I2C1_Init();
 8000f66:	f000 f91f 	bl	80011a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f6a:	f000 f9a9 	bl	80012c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

    if (baro_init() != BARO_OK) {
 8000f6e:	f7ff fb61 	bl	8000634 <baro_init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d011      	beq.n	8000f9c <main+0x58>
      snprintf(text, countof(text), "Error init baro\n");
 8000f78:	4a28      	ldr	r2, [pc, #160]	; (800101c <main+0xd8>)
 8000f7a:	2164      	movs	r1, #100	; 0x64
 8000f7c:	4828      	ldr	r0, [pc, #160]	; (8001020 <main+0xdc>)
 8000f7e:	f003 fd97 	bl	8004ab0 <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000f82:	2164      	movs	r1, #100	; 0x64
 8000f84:	4826      	ldr	r0, [pc, #152]	; (8001020 <main+0xdc>)
 8000f86:	f003 fdc7 	bl	8004b18 <strnlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	4923      	ldr	r1, [pc, #140]	; (8001020 <main+0xdc>)
 8000f94:	4823      	ldr	r0, [pc, #140]	; (8001024 <main+0xe0>)
 8000f96:	f003 f9e4 	bl	8004362 <HAL_UART_Transmit>
      while (1) {}
 8000f9a:	e7fe      	b.n	8000f9a <main+0x56>
  //    int32_t signal_noised = signal + (rand() % 20) - 10;
  //    int32_t signal_filtered = filter(signal_noised);
  //
  //    sprintf(text, "/*%ld,%ld,%ld*/\n", signal, signal_noised, signal_filtered);

      int32_t temp = baro_read_temp();
 8000f9c:	f7ff fc50 	bl	8000840 <baro_read_temp>
 8000fa0:	60b8      	str	r0, [r7, #8]
      int32_t pres = baro_read_press();
 8000fa2:	f7ff fcbd 	bl	8000920 <baro_read_press>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	607b      	str	r3, [r7, #4]
      snprintf(text, countof(text), "/*%ld.%02ld,%ld.%02ld*/\n", temp/100, temp%100, pres/100, pres%100);
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	4a1e      	ldr	r2, [pc, #120]	; (8001028 <main+0xe4>)
 8000fae:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb2:	1152      	asrs	r2, r2, #5
 8000fb4:	17db      	asrs	r3, r3, #31
 8000fb6:	1ad5      	subs	r5, r2, r3
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <main+0xe4>)
 8000fbc:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc0:	1159      	asrs	r1, r3, #5
 8000fc2:	17d3      	asrs	r3, r2, #31
 8000fc4:	1acb      	subs	r3, r1, r3
 8000fc6:	2164      	movs	r1, #100	; 0x64
 8000fc8:	fb01 f303 	mul.w	r3, r1, r3
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4915      	ldr	r1, [pc, #84]	; (8001028 <main+0xe4>)
 8000fd2:	fb81 0102 	smull	r0, r1, r1, r2
 8000fd6:	1149      	asrs	r1, r1, #5
 8000fd8:	17d2      	asrs	r2, r2, #31
 8000fda:	1a88      	subs	r0, r1, r2
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <main+0xe4>)
 8000fe0:	fb82 4201 	smull	r4, r2, r2, r1
 8000fe4:	1154      	asrs	r4, r2, #5
 8000fe6:	17ca      	asrs	r2, r1, #31
 8000fe8:	1aa2      	subs	r2, r4, r2
 8000fea:	2464      	movs	r4, #100	; 0x64
 8000fec:	fb04 f202 	mul.w	r2, r4, r2
 8000ff0:	1a8a      	subs	r2, r1, r2
 8000ff2:	9202      	str	r2, [sp, #8]
 8000ff4:	9001      	str	r0, [sp, #4]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	462b      	mov	r3, r5
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <main+0xe8>)
 8000ffc:	2164      	movs	r1, #100	; 0x64
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <main+0xdc>)
 8001000:	f003 fd56 	bl	8004ab0 <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)text, strlen(text), 1000);
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <main+0xdc>)
 8001006:	f7ff f8eb 	bl	80001e0 <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	4903      	ldr	r1, [pc, #12]	; (8001020 <main+0xdc>)
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <main+0xe0>)
 8001016:	f003 f9a4 	bl	8004362 <HAL_UART_Transmit>
    {
 800101a:	e7bf      	b.n	8000f9c <main+0x58>
 800101c:	080053e4 	.word	0x080053e4
 8001020:	20000238 	.word	0x20000238
 8001024:	200001f4 	.word	0x200001f4
 8001028:	51eb851f 	.word	0x51eb851f
 800102c:	080053f8 	.word	0x080053f8

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	; 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fd2e 	bl	8004aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <SystemClock_Config+0xcc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <SystemClock_Config+0xd0>)
 800107e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001090:	2301      	movs	r3, #1
 8001092:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010a4:	2319      	movs	r3, #25
 80010a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a8:	23a8      	movs	r3, #168	; 0xa8
 80010aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b0:	2304      	movs	r3, #4
 80010b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 f92f 	bl	800331c <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010c4:	f000 f9d4 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2102      	movs	r1, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fb91 	bl	800380c <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f0:	f000 f9be 	bl	8001470 <Error_Handler>
  }
}
 80010f4:	bf00      	nop
 80010f6:	3750      	adds	r7, #80	; 0x50
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_ADC1_Init+0x98>)
 8001118:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_ADC1_Init+0x98>)
 800111e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001122:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_ADC1_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_ADC1_Init+0x98>)
 8001132:	2201      	movs	r2, #1
 8001134:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_ADC1_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_ADC1_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_ADC1_Init+0x98>)
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <MX_ADC1_Init+0xa0>)
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_ADC1_Init+0x98>)
 8001152:	2201      	movs	r2, #1
 8001154:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_ADC1_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_ADC1_Init+0x98>)
 8001160:	2201      	movs	r2, #1
 8001162:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_ADC1_Init+0x98>)
 8001166:	f000 fbe3 	bl	8001930 <HAL_ADC_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f97e 	bl	8001470 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_ADC1_Init+0x98>)
 8001186:	f000 fc17 	bl	80019b8 <HAL_ADC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001190:	f000 f96e 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000c8 	.word	0x200000c8
 80011a0:	40012000 	.word	0x40012000
 80011a4:	0f000001 	.word	0x0f000001

080011a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <MX_I2C1_Init+0x54>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011b4:	4a12      	ldr	r2, [pc, #72]	; (8001200 <MX_I2C1_Init+0x58>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_I2C1_Init+0x50>)
 80011e6:	f001 f8d9 	bl	800239c <HAL_I2C_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f0:	f000 f93e 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000110 	.word	0x20000110
 80011fc:	40005400 	.word	0x40005400
 8001200:	000186a0 	.word	0x000186a0

08001204 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_TIM9_Init+0x6c>)
 8001218:	4a16      	ldr	r2, [pc, #88]	; (8001274 <MX_TIM9_Init+0x70>)
 800121a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_TIM9_Init+0x6c>)
 800121e:	f240 3247 	movw	r2, #839	; 0x347
 8001222:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_TIM9_Init+0x6c>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 49999;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_TIM9_Init+0x6c>)
 800122c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001230:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_TIM9_Init+0x6c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <MX_TIM9_Init+0x6c>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <MX_TIM9_Init+0x6c>)
 8001240:	f002 fcc4 	bl	8003bcc <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800124a:	f000 f911 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_TIM9_Init+0x6c>)
 800125a:	f002 fe0e 	bl	8003e7a <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001264:	f000 f904 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000164 	.word	0x20000164
 8001274:	40014000 	.word	0x40014000

08001278 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_TIM10_Init+0x40>)
 800127e:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <MX_TIM10_Init+0x44>)
 8001280:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <MX_TIM10_Init+0x40>)
 8001284:	2254      	movs	r2, #84	; 0x54
 8001286:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_TIM10_Init+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_TIM10_Init+0x40>)
 8001290:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001294:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_TIM10_Init+0x40>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_TIM10_Init+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM10_Init+0x40>)
 80012a4:	f002 fc92 	bl	8003bcc <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80012ae:	f000 f8df 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001ac 	.word	0x200001ac
 80012bc:	40014400 	.word	0x40014400

080012c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART1_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012f8:	f002 ffe6 	bl	80042c8 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f8b5 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001f4 	.word	0x200001f4
 8001310:	40011000 	.word	0x40011000

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b49      	ldr	r3, [pc, #292]	; (8001460 <MX_GPIO_Init+0x14c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b45      	ldr	r3, [pc, #276]	; (8001460 <MX_GPIO_Init+0x14c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a44      	ldr	r2, [pc, #272]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <MX_GPIO_Init+0x14c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b37      	ldr	r3, [pc, #220]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a36      	ldr	r2, [pc, #216]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b34      	ldr	r3, [pc, #208]	; (8001460 <MX_GPIO_Init+0x14c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a0:	4830      	ldr	r0, [pc, #192]	; (8001464 <MX_GPIO_Init+0x150>)
 80013a2:	f000 ffbd 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2140      	movs	r1, #64	; 0x40
 80013aa:	482f      	ldr	r0, [pc, #188]	; (8001468 <MX_GPIO_Init+0x154>)
 80013ac:	f000 ffb8 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2180      	movs	r1, #128	; 0x80
 80013b4:	482c      	ldr	r0, [pc, #176]	; (8001468 <MX_GPIO_Init+0x154>)
 80013b6:	f000 ffb3 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_G_GPIO_Port, LED2_G_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c0:	482a      	ldr	r0, [pc, #168]	; (800146c <MX_GPIO_Init+0x158>)
 80013c2:	f000 ffad 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Y_Pin|LED2_R_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80013cc:	4827      	ldr	r0, [pc, #156]	; (800146c <MX_GPIO_Init+0x158>)
 80013ce:	f000 ffa7 	bl	8002320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	481e      	ldr	r0, [pc, #120]	; (8001464 <MX_GPIO_Init+0x150>)
 80013ec:	f000 fe14 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin;
 80013f0:	23c0      	movs	r3, #192	; 0xc0
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013f4:	2311      	movs	r3, #17
 80013f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4818      	ldr	r0, [pc, #96]	; (8001468 <MX_GPIO_Init+0x154>)
 8001408:	f000 fe06 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001412:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4812      	ldr	r0, [pc, #72]	; (800146c <MX_GPIO_Init+0x158>)
 8001424:	f000 fdf8 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_G_Pin LED1_Y_Pin LED2_R_Pin */
  GPIO_InitStruct.Pin = LED2_G_Pin|LED1_Y_Pin|LED2_R_Pin;
 8001428:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800142c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800142e:	2311      	movs	r3, #17
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	480a      	ldr	r0, [pc, #40]	; (800146c <MX_GPIO_Init+0x158>)
 8001442:	f000 fde9 	bl	8002018 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2028      	movs	r0, #40	; 0x28
 800144c:	f000 fdad 	bl	8001faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001450:	2028      	movs	r0, #40	; 0x28
 8001452:	f000 fdc6 	bl	8001fe2 <HAL_NVIC_EnableIRQ>

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>
	...

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_MspInit+0x4c>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_ADC_MspInit+0x7c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d127      	bne.n	800153e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_ADC_MspInit+0x80>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <HAL_ADC_MspInit+0x80>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_ADC_MspInit+0x80>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_ADC_MspInit+0x80>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_ADC_MspInit+0x80>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_ADC_MspInit+0x80>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_Pin;
 8001526:	2301      	movs	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152a:	2303      	movs	r3, #3
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <HAL_ADC_MspInit+0x84>)
 800153a:	f000 fd6d 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40012000 	.word	0x40012000
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_I2C_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12c      	bne.n	80015d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_I2C_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_I2C_MspInit+0x88>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_I2C_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001592:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001598:	2312      	movs	r3, #18
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015a4:	2304      	movs	r3, #4
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <HAL_I2C_MspInit+0x8c>)
 80015b0:	f000 fd32 	bl	8002018 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_I2C_MspInit+0x88>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	; 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40005400 	.word	0x40005400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400

080015e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_TIM_Base_MspInit+0x70>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d116      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2018      	movs	r0, #24
 8001618:	f000 fcc7 	bl	8001faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800161c:	2018      	movs	r0, #24
 800161e:	f000 fce0 	bl	8001fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001622:	e012      	b.n	800164a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_TIM_Base_MspInit+0x78>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10d      	bne.n	800164a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40014000 	.word	0x40014000
 8001658:	40023800 	.word	0x40023800
 800165c:	40014400 	.word	0x40014400

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_UART_MspInit+0x84>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d12b      	bne.n	80016da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_UART_MspInit+0x88>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <HAL_UART_MspInit+0x88>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_UART_MspInit+0x88>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_UART_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <HAL_UART_MspInit+0x88>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_UART_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016ca:	2307      	movs	r3, #7
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_UART_MspInit+0x8c>)
 80016d6:	f000 fc9f 	bl	8002018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	; 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40011000 	.word	0x40011000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020400 	.word	0x40020400

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f8d8 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800174a:	f002 fa8e 	bl	8003c6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000164 	.word	0x20000164

08001758 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800175c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001760:	f000 fdf8 	bl	8002354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f003 f958 	bl	8004a4c <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20010000 	.word	0x20010000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	2000029c 	.word	0x2000029c
 80017d0:	200002b8 	.word	0x200002b8

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	; (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001822:	f7ff ffd7 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f003 f917 	bl	8004a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7ff fb8b 	bl	8000f44 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800183c:	08005470 	.word	0x08005470
  ldr r2, =_sbss
 8001840:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001844:	200002b4 	.word	0x200002b4

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 fb8d 	bl	8001f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	200f      	movs	r0, #15
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fdfc 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fba5 	bl	8001ffe <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f000 fb6d 	bl	8001faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	20000008 	.word	0x20000008
 8001914:	200002a0 	.word	0x200002a0

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	200002a0 	.word	0x200002a0

08001930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e033      	b.n	80019ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fdbc 	bl	80014cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d118      	bne.n	80019a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001976:	f023 0302 	bic.w	r3, r3, #2
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f93a 	bl	8001bfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
 800199e:	e001      	b.n	80019a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1c>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e105      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x228>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	d925      	bls.n	8001a30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68d9      	ldr	r1, [r3, #12]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	3b1e      	subs	r3, #30
 80019fa:	2207      	movs	r2, #7
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43da      	mvns	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	400a      	ands	r2, r1
 8001a08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68d9      	ldr	r1, [r3, #12]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4403      	add	r3, r0
 8001a22:	3b1e      	subs	r3, #30
 8001a24:	409a      	lsls	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	e022      	b.n	8001a76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6919      	ldr	r1, [r3, #16]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	2207      	movs	r2, #7
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	400a      	ands	r2, r1
 8001a52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6919      	ldr	r1, [r3, #16]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	4603      	mov	r3, r0
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4403      	add	r3, r0
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d824      	bhi.n	8001ac8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b05      	subs	r3, #5
 8001a90:	221f      	movs	r2, #31
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b05      	subs	r3, #5
 8001aba:	fa00 f203 	lsl.w	r2, r0, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac6:	e04c      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d824      	bhi.n	8001b1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b23      	subs	r3, #35	; 0x23
 8001ae2:	221f      	movs	r2, #31
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43da      	mvns	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	400a      	ands	r2, r1
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	3b23      	subs	r3, #35	; 0x23
 8001b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30
 8001b18:	e023      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b41      	subs	r3, #65	; 0x41
 8001b2c:	221f      	movs	r2, #31
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	3b41      	subs	r3, #65	; 0x41
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_ADC_ConfigChannel+0x234>)
 8001b64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <HAL_ADC_ConfigChannel+0x238>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1cc>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b12      	cmp	r3, #18
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_ADC_ConfigChannel+0x238>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d123      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x21e>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d003      	beq.n	8001b9e <HAL_ADC_ConfigChannel+0x1e6>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d11b      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d111      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_ADC_ConfigChannel+0x23c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <HAL_ADC_ConfigChannel+0x240>)
 8001bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbc:	0c9a      	lsrs	r2, r3, #18
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bc8:	e002      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40012300 	.word	0x40012300
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <ADC_Init+0x1f0>)
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	021a      	lsls	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6899      	ldr	r1, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <ADC_Init+0x1f4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d022      	beq.n	8001cda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6899      	ldr	r1, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6899      	ldr	r1, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	e00f      	b.n	8001cfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0202 	bic.w	r2, r2, #2
 8001d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7e1b      	ldrb	r3, [r3, #24]
 8001d14:	005a      	lsls	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	3b01      	subs	r3, #1
 8001d54:	035a      	lsls	r2, r3, #13
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e007      	b.n	8001d70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	051a      	lsls	r2, r3, #20
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6899      	ldr	r1, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001db2:	025a      	lsls	r2, r3, #9
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	029a      	lsls	r2, r3, #10
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40012300 	.word	0x40012300
 8001df0:	0f000001 	.word	0x0f000001

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6039      	str	r1, [r7, #0]
 8001e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	db0a      	blt.n	8001ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <__NVIC_SetPriority+0x4c>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	0112      	lsls	r2, r2, #4
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ebc:	e00a      	b.n	8001ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4908      	ldr	r1, [pc, #32]	; (8001ee4 <__NVIC_SetPriority+0x50>)
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	3b04      	subs	r3, #4
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	761a      	strb	r2, [r3, #24]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000e100 	.word	0xe000e100
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b089      	sub	sp, #36	; 0x24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f1c3 0307 	rsb	r3, r3, #7
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	bf28      	it	cs
 8001f06:	2304      	movcs	r3, #4
 8001f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2b06      	cmp	r3, #6
 8001f10:	d902      	bls.n	8001f18 <NVIC_EncodePriority+0x30>
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3b03      	subs	r3, #3
 8001f16:	e000      	b.n	8001f1a <NVIC_EncodePriority+0x32>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43da      	mvns	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f30:	f04f 31ff 	mov.w	r1, #4294967295
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	43d9      	mvns	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	4313      	orrs	r3, r2
         );
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f60:	d301      	bcc.n	8001f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00f      	b.n	8001f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <SysTick_Config+0x40>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6e:	210f      	movs	r1, #15
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f7ff ff8e 	bl	8001e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <SysTick_Config+0x40>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SysTick_Config+0x40>)
 8001f80:	2207      	movs	r2, #7
 8001f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff29 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbc:	f7ff ff3e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7ff ff8e 	bl	8001ee8 <NVIC_EncodePriority>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff5d 	bl	8001e94 <__NVIC_SetPriority>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff31 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffa2 	bl	8001f50 <SysTick_Config>
 800200c:	4603      	mov	r3, r0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	e159      	b.n	80022e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002034:	2201      	movs	r2, #1
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 8148 	bne.w	80022e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d005      	beq.n	800206a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	2b02      	cmp	r3, #2
 8002068:	d130      	bne.n	80020cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d017      	beq.n	8002108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d123      	bne.n	800215c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a2 	beq.w	80022e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_GPIO_Init+0x2e8>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_GPIO_Init+0x2e8>)
 80021a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_GPIO_Init+0x2e8>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ba:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_GPIO_Init+0x2ec>)
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a49      	ldr	r2, [pc, #292]	; (8002308 <HAL_GPIO_Init+0x2f0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_Init+0x202>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a48      	ldr	r2, [pc, #288]	; (800230c <HAL_GPIO_Init+0x2f4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0x1fe>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a47      	ldr	r2, [pc, #284]	; (8002310 <HAL_GPIO_Init+0x2f8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_Init+0x1fa>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a46      	ldr	r2, [pc, #280]	; (8002314 <HAL_GPIO_Init+0x2fc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_Init+0x1f6>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a45      	ldr	r2, [pc, #276]	; (8002318 <HAL_GPIO_Init+0x300>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_Init+0x1f2>
 8002206:	2304      	movs	r3, #4
 8002208:	e008      	b.n	800221c <HAL_GPIO_Init+0x204>
 800220a:	2307      	movs	r3, #7
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x204>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_Init+0x204>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_Init+0x204>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x204>
 800221a:	2300      	movs	r3, #0
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222c:	4935      	ldr	r1, [pc, #212]	; (8002304 <HAL_GPIO_Init+0x2ec>)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_GPIO_Init+0x304>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a2f      	ldr	r2, [pc, #188]	; (800231c <HAL_GPIO_Init+0x304>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_GPIO_Init+0x304>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <HAL_GPIO_Init+0x304>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228e:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_GPIO_Init+0x304>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_GPIO_Init+0x304>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_GPIO_Init+0x304>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_GPIO_Init+0x304>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	f67f aea2 	bls.w	8002034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40013800 	.word	0x40013800
 8002308:	40020000 	.word	0x40020000
 800230c:	40020400 	.word	0x40020400
 8002310:	40020800 	.word	0x40020800
 8002314:	40020c00 	.word	0x40020c00
 8002318:	40021000 	.word	0x40021000
 800231c:	40013c00 	.word	0x40013c00

08002320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	807b      	strh	r3, [r7, #2]
 800232c:	4613      	mov	r3, r2
 800232e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002330:	787b      	ldrb	r3, [r7, #1]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800233c:	e003      	b.n	8002346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	041a      	lsls	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	619a      	str	r2, [r3, #24]
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f806 	bl	8002384 <HAL_GPIO_EXTI_Callback>
  }
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e12b      	b.n	8002606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff f8c6 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002400:	f001 fbbc 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a81      	ldr	r2, [pc, #516]	; (8002610 <HAL_I2C_Init+0x274>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d807      	bhi.n	8002420 <HAL_I2C_Init+0x84>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_I2C_Init+0x278>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e006      	b.n	800242e <HAL_I2C_Init+0x92>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <HAL_I2C_Init+0x27c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0e7      	b.n	8002606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a78      	ldr	r2, [pc, #480]	; (800261c <HAL_I2C_Init+0x280>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a6a      	ldr	r2, [pc, #424]	; (8002610 <HAL_I2C_Init+0x274>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d802      	bhi.n	8002470 <HAL_I2C_Init+0xd4>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	e009      	b.n	8002484 <HAL_I2C_Init+0xe8>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	4a69      	ldr	r2, [pc, #420]	; (8002620 <HAL_I2C_Init+0x284>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	3301      	adds	r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	495c      	ldr	r1, [pc, #368]	; (8002610 <HAL_I2C_Init+0x274>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d819      	bhi.n	80024d8 <HAL_I2C_Init+0x13c>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e59      	subs	r1, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b8:	400b      	ands	r3, r1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_I2C_Init+0x138>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e59      	subs	r1, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	e051      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 80024d4:	2304      	movs	r3, #4
 80024d6:	e04f      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <HAL_I2C_Init+0x168>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e012      	b.n	800252a <HAL_I2C_Init+0x18e>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x196>
 800252e:	2301      	movs	r3, #1
 8002530:	e022      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10e      	bne.n	8002558 <HAL_I2C_Init+0x1bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1e58      	subs	r0, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	440b      	add	r3, r1
 8002548:	fbb0 f3f3 	udiv	r3, r0, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002556:	e00f      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	0099      	lsls	r1, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	6809      	ldr	r1, [r1, #0]
 800257c:	4313      	orrs	r3, r2
 800257e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6911      	ldr	r1, [r2, #16]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68d2      	ldr	r2, [r2, #12]
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	000186a0 	.word	0x000186a0
 8002614:	001e847f 	.word	0x001e847f
 8002618:	003d08ff 	.word	0x003d08ff
 800261c:	431bde83 	.word	0x431bde83
 8002620:	10624dd3 	.word	0x10624dd3

08002624 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	461a      	mov	r2, r3
 8002632:	4603      	mov	r3, r0
 8002634:	817b      	strh	r3, [r7, #10]
 8002636:	460b      	mov	r3, r1
 8002638:	813b      	strh	r3, [r7, #8]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800263e:	f7ff f96b 	bl	8001918 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b20      	cmp	r3, #32
 800264e:	f040 80d9 	bne.w	8002804 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2319      	movs	r3, #25
 8002658:	2201      	movs	r2, #1
 800265a:	496d      	ldr	r1, [pc, #436]	; (8002810 <HAL_I2C_Mem_Write+0x1ec>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fc7f 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
 800266a:	e0cc      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2C_Mem_Write+0x56>
 8002676:	2302      	movs	r3, #2
 8002678:	e0c5      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d007      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2221      	movs	r2, #33	; 0x21
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2240      	movs	r2, #64	; 0x40
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <HAL_I2C_Mem_Write+0x1f0>)
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e2:	88f8      	ldrh	r0, [r7, #6]
 80026e4:	893a      	ldrh	r2, [r7, #8]
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	4603      	mov	r3, r0
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fab6 	bl	8002c64 <I2C_RequestMemoryWrite>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d052      	beq.n	80027a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e081      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fd00 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b04      	cmp	r3, #4
 8002718:	d107      	bne.n	800272a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06b      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d11b      	bne.n	80027a4 <HAL_I2C_Mem_Write+0x180>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002770:	2b00      	cmp	r3, #0
 8002772:	d017      	beq.n	80027a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1aa      	bne.n	8002702 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 fcec 	bl	800318e <I2C_WaitOnBTFFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00d      	beq.n	80027d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d107      	bne.n	80027d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e016      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	00100002 	.word	0x00100002
 8002814:	ffff0000 	.word	0xffff0000

08002818 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08c      	sub	sp, #48	; 0x30
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	817b      	strh	r3, [r7, #10]
 800282a:	460b      	mov	r3, r1
 800282c:	813b      	strh	r3, [r7, #8]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002832:	f7ff f871 	bl	8001918 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b20      	cmp	r3, #32
 8002842:	f040 8208 	bne.w	8002c56 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2319      	movs	r3, #25
 800284c:	2201      	movs	r2, #1
 800284e:	497b      	ldr	r1, [pc, #492]	; (8002a3c <HAL_I2C_Mem_Read+0x224>)
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fb85 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
 800285e:	e1fb      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_I2C_Mem_Read+0x56>
 800286a:	2302      	movs	r3, #2
 800286c:	e1f4      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d007      	beq.n	8002894 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2222      	movs	r2, #34	; 0x22
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a5b      	ldr	r2, [pc, #364]	; (8002a40 <HAL_I2C_Mem_Read+0x228>)
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d6:	88f8      	ldrh	r0, [r7, #6]
 80028d8:	893a      	ldrh	r2, [r7, #8]
 80028da:	8979      	ldrh	r1, [r7, #10]
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	4603      	mov	r3, r0
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fa52 	bl	8002d90 <I2C_RequestMemoryRead>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1b0      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d113      	bne.n	8002926 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	623b      	str	r3, [r7, #32]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e184      	b.n	8002c30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b01      	cmp	r3, #1
 800292c:	d11b      	bne.n	8002966 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e164      	b.n	8002c30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296a:	2b02      	cmp	r3, #2
 800296c:	d11b      	bne.n	80029a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800298c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	61bb      	str	r3, [r7, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	e144      	b.n	8002c30 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029bc:	e138      	b.n	8002c30 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	f200 80f1 	bhi.w	8002baa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d123      	bne.n	8002a18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fc1b 	bl	8003210 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e139      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a16:	e10b      	b.n	8002c30 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d14e      	bne.n	8002abe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	2200      	movs	r2, #0
 8002a28:	4906      	ldr	r1, [pc, #24]	; (8002a44 <HAL_I2C_Mem_Read+0x22c>)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fa98 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e10e      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
 8002a3a:	bf00      	nop
 8002a3c:	00100002 	.word	0x00100002
 8002a40:	ffff0000 	.word	0xffff0000
 8002a44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002abc:	e0b8      	b.n	8002c30 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4966      	ldr	r1, [pc, #408]	; (8002c60 <HAL_I2C_Mem_Read+0x448>)
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fa49 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0bf      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	2200      	movs	r2, #0
 8002b22:	494f      	ldr	r1, [pc, #316]	; (8002c60 <HAL_I2C_Mem_Read+0x448>)
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fa1b 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e091      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba8:	e042      	b.n	8002c30 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fb2e 	bl	8003210 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e04c      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d118      	bne.n	8002c30 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f aec2 	bne.w	80029be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c56:	2302      	movs	r3, #2
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	00010004 	.word	0x00010004

08002c64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f960 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00d      	beq.n	8002cc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb4:	d103      	bne.n	8002cbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e05f      	b.n	8002d82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cc2:	897b      	ldrh	r3, [r7, #10]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002cd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	6a3a      	ldr	r2, [r7, #32]
 8002cd6:	492d      	ldr	r1, [pc, #180]	; (8002d8c <I2C_RequestMemoryWrite+0x128>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f998 	bl	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e04c      	b.n	8002d82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 fa02 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d107      	bne.n	8002d26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e02b      	b.n	8002d82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d30:	893b      	ldrh	r3, [r7, #8]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	611a      	str	r2, [r3, #16]
 8002d3a:	e021      	b.n	8002d80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d3c:	893b      	ldrh	r3, [r7, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	6a39      	ldr	r1, [r7, #32]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f9dc 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d107      	bne.n	8002d72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e005      	b.n	8002d82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d76:	893b      	ldrh	r3, [r7, #8]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	00010002 	.word	0x00010002

08002d90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	4608      	mov	r0, r1
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4603      	mov	r3, r0
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	460b      	mov	r3, r1
 8002da4:	813b      	strh	r3, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002db8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f8c2 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df0:	d103      	bne.n	8002dfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0aa      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	4952      	ldr	r1, [pc, #328]	; (8002f5c <I2C_RequestMemoryRead+0x1cc>)
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f8fa 	bl	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e097      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f964 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d107      	bne.n	8002e62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e076      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6c:	893b      	ldrh	r3, [r7, #8]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]
 8002e76:	e021      	b.n	8002ebc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f93e 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d107      	bne.n	8002eae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e050      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb2:	893b      	ldrh	r3, [r7, #8]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebe:	6a39      	ldr	r1, [r7, #32]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f923 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d107      	bne.n	8002ee4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e035      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f82b 	bl	8002f60 <I2C_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1e:	d103      	bne.n	8002f28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e013      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f2c:	897b      	ldrh	r3, [r7, #10]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	4906      	ldr	r1, [pc, #24]	; (8002f5c <I2C_RequestMemoryRead+0x1cc>)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f863 	bl	800300e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	00010002 	.word	0x00010002

08002f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f70:	e025      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d021      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe fccd 	bl	8001918 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e023      	b.n	8003006 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10d      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	e00c      	b.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	429a      	cmp	r2, r3
 8003002:	d0b6      	beq.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800301c:	e051      	b.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302c:	d123      	bne.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003046:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e046      	b.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d021      	beq.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe fc4b 	bl	8001918 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d116      	bne.n	80030c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e020      	b.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10c      	bne.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e00b      	b.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	43da      	mvns	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d18d      	bne.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003118:	e02d      	b.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8ce 	bl	80032bc <I2C_IsAcknowledgeFailed>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e02d      	b.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d021      	beq.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7fe fbf1 	bl	8001918 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d116      	bne.n	8003176 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e007      	b.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b80      	cmp	r3, #128	; 0x80
 8003182:	d1ca      	bne.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319a:	e02d      	b.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f88d 	bl	80032bc <I2C_IsAcknowledgeFailed>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e02d      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b2:	d021      	beq.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b4:	f7fe fbb0 	bl	8001918 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d302      	bcc.n	80031ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e007      	b.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d1ca      	bne.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800321c:	e042      	b.n	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b10      	cmp	r3, #16
 800322a:	d119      	bne.n	8003260 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0210 	mvn.w	r2, #16
 8003234:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e029      	b.n	80032b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003260:	f7fe fb5a 	bl	8001918 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	429a      	cmp	r2, r3
 800326e:	d302      	bcc.n	8003276 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e007      	b.n	80032b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d1b5      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d11b      	bne.n	800330c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e267      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d075      	beq.n	8003426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	4b88      	ldr	r3, [pc, #544]	; (800355c <HAL_RCC_OscConfig+0x240>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b04      	cmp	r3, #4
 8003344:	d00c      	beq.n	8003360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003346:	4b85      	ldr	r3, [pc, #532]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334e:	2b08      	cmp	r3, #8
 8003350:	d112      	bne.n	8003378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003352:	4b82      	ldr	r3, [pc, #520]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335e:	d10b      	bne.n	8003378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	4b7e      	ldr	r3, [pc, #504]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d05b      	beq.n	8003424 <HAL_RCC_OscConfig+0x108>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d157      	bne.n	8003424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e242      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x74>
 8003382:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a75      	ldr	r2, [pc, #468]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e01d      	b.n	80033cc <HAL_RCC_OscConfig+0xb0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x98>
 800339a:	4b70      	ldr	r3, [pc, #448]	; (800355c <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a6f      	ldr	r2, [pc, #444]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6c      	ldr	r2, [pc, #432]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e00b      	b.n	80033cc <HAL_RCC_OscConfig+0xb0>
 80033b4:	4b69      	ldr	r3, [pc, #420]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a68      	ldr	r2, [pc, #416]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a65      	ldr	r2, [pc, #404]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe faa0 	bl	8001918 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe fa9c 	bl	8001918 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e207      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b5b      	ldr	r3, [pc, #364]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0xc0>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fa8c 	bl	8001918 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fa88 	bl	8001918 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1f3      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0xe8>
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d063      	beq.n	80034fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003446:	2b08      	cmp	r3, #8
 8003448:	d11c      	bne.n	8003484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b44      	ldr	r3, [pc, #272]	; (800355c <HAL_RCC_OscConfig+0x240>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d116      	bne.n	8003484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	4b41      	ldr	r3, [pc, #260]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_RCC_OscConfig+0x152>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e1c7      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4937      	ldr	r1, [pc, #220]	; (800355c <HAL_RCC_OscConfig+0x240>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	e03a      	b.n	80034fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d020      	beq.n	80034ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348c:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_RCC_OscConfig+0x244>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fe fa41 	bl	8001918 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349a:	f7fe fa3d 	bl	8001918 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e1a8      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ac:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4925      	ldr	r1, [pc, #148]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]
 80034cc:	e015      	b.n	80034fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_OscConfig+0x244>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe fa20 	bl	8001918 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034dc:	f7fe fa1c 	bl	8001918 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e187      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d036      	beq.n	8003574 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d016      	beq.n	800353c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_RCC_OscConfig+0x248>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe fa00 	bl	8001918 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800351c:	f7fe f9fc 	bl	8001918 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e167      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352e:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_OscConfig+0x240>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x200>
 800353a:	e01b      	b.n	8003574 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_OscConfig+0x248>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fe f9e9 	bl	8001918 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	e00e      	b.n	8003568 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354a:	f7fe f9e5 	bl	8001918 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d907      	bls.n	8003568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e150      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
 800355c:	40023800 	.word	0x40023800
 8003560:	42470000 	.word	0x42470000
 8003564:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	4b88      	ldr	r3, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800356a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ea      	bne.n	800354a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8097 	beq.w	80036b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003586:	4b81      	ldr	r3, [pc, #516]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	4b7d      	ldr	r3, [pc, #500]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a7c      	ldr	r2, [pc, #496]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b7a      	ldr	r3, [pc, #488]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b2:	4b77      	ldr	r3, [pc, #476]	; (8003790 <HAL_RCC_OscConfig+0x474>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d118      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035be:	4b74      	ldr	r3, [pc, #464]	; (8003790 <HAL_RCC_OscConfig+0x474>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a73      	ldr	r2, [pc, #460]	; (8003790 <HAL_RCC_OscConfig+0x474>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ca:	f7fe f9a5 	bl	8001918 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d2:	f7fe f9a1 	bl	8001918 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e10c      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e4:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCC_OscConfig+0x474>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x2ea>
 80035f8:	4b64      	ldr	r3, [pc, #400]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	4a63      	ldr	r2, [pc, #396]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6713      	str	r3, [r2, #112]	; 0x70
 8003604:	e01c      	b.n	8003640 <HAL_RCC_OscConfig+0x324>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b05      	cmp	r3, #5
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x30c>
 800360e:	4b5f      	ldr	r3, [pc, #380]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a5e      	ldr	r2, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
 800361a:	4b5c      	ldr	r3, [pc, #368]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a5b      	ldr	r2, [pc, #364]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0x324>
 8003628:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
 8003634:	4b55      	ldr	r3, [pc, #340]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a54      	ldr	r2, [pc, #336]	; (800378c <HAL_RCC_OscConfig+0x470>)
 800363a:	f023 0304 	bic.w	r3, r3, #4
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fe f966 	bl	8001918 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364e:	e00a      	b.n	8003666 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f7fe f962 	bl	8001918 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0cb      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	4b49      	ldr	r3, [pc, #292]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0ee      	beq.n	8003650 <HAL_RCC_OscConfig+0x334>
 8003672:	e014      	b.n	800369e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003674:	f7fe f950 	bl	8001918 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367c:	f7fe f94c 	bl	8001918 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e0b5      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003692:	4b3e      	ldr	r3, [pc, #248]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ee      	bne.n	800367c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b39      	ldr	r3, [pc, #228]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	4a38      	ldr	r2, [pc, #224]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80a1 	beq.w	80037fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ba:	4b34      	ldr	r3, [pc, #208]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d05c      	beq.n	8003780 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d141      	bne.n	8003752 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b31      	ldr	r3, [pc, #196]	; (8003794 <HAL_RCC_OscConfig+0x478>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7fe f920 	bl	8001918 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036dc:	f7fe f91c 	bl	8001918 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e087      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_RCC_OscConfig+0x470>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	019b      	lsls	r3, r3, #6
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	3b01      	subs	r3, #1
 8003714:	041b      	lsls	r3, r3, #16
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	061b      	lsls	r3, r3, #24
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x478>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe f8f5 	bl	8001918 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe f8f1 	bl	8001918 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e05c      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x416>
 8003750:	e054      	b.n	80037fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_OscConfig+0x478>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe f8de 	bl	8001918 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe f8da 	bl	8001918 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e045      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_OscConfig+0x470>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x444>
 800377e:	e03d      	b.n	80037fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e038      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
 800378c:	40023800 	.word	0x40023800
 8003790:	40007000 	.word	0x40007000
 8003794:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x4ec>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d028      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d121      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d11a      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d111      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	085b      	lsrs	r3, r3, #1
 80037e0:	3b01      	subs	r3, #1
 80037e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800

0800380c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0cc      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d90c      	bls.n	8003848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b65      	ldr	r3, [pc, #404]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0b8      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003860:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a58      	ldr	r2, [pc, #352]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800386a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003878:	4b53      	ldr	r3, [pc, #332]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a52      	ldr	r2, [pc, #328]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	494d      	ldr	r1, [pc, #308]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d044      	beq.n	800392c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d119      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e07f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e067      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4934      	ldr	r1, [pc, #208]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038fc:	f7fe f80c 	bl	8001918 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	e00a      	b.n	800391a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003904:	f7fe f808 	bl	8001918 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e04f      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 020c 	and.w	r2, r3, #12
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	429a      	cmp	r2, r3
 800392a:	d1eb      	bne.n	8003904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d20c      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800393a:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e032      	b.n	80039ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003960:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4916      	ldr	r1, [pc, #88]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	490e      	ldr	r1, [pc, #56]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003992:	f000 f821 	bl	80039d8 <HAL_RCC_GetSysClockFreq>
 8003996:	4602      	mov	r2, r0
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	490a      	ldr	r1, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	5ccb      	ldrb	r3, [r1, r3]
 80039a6:	fa22 f303 	lsr.w	r3, r2, r3
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039ae:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd ff6c 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00
 80039c8:	40023800 	.word	0x40023800
 80039cc:	08005414 	.word	0x08005414
 80039d0:	20000000 	.word	0x20000000
 80039d4:	20000004 	.word	0x20000004

080039d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039dc:	b090      	sub	sp, #64	; 0x40
 80039de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	637b      	str	r3, [r7, #52]	; 0x34
 80039e4:	2300      	movs	r3, #0
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e8:	2300      	movs	r3, #0
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f0:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x180>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f003 030c 	and.w	r3, r3, #12
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d00d      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x40>
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	f200 80a1 	bhi.w	8003b44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x34>
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a0a:	e09b      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003a0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a10:	e09b      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a12:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a16:	e098      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a18:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a22:	4b4d      	ldr	r3, [pc, #308]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d028      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2e:	4b4a      	ldr	r3, [pc, #296]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	099b      	lsrs	r3, r3, #6
 8003a34:	2200      	movs	r2, #0
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	627a      	str	r2, [r7, #36]	; 0x24
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a40:	2100      	movs	r1, #0
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a44:	fb03 f201 	mul.w	r2, r3, r1
 8003a48:	2300      	movs	r3, #0
 8003a4a:	fb00 f303 	mul.w	r3, r0, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	4a43      	ldr	r2, [pc, #268]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a52:	fba0 1202 	umull	r1, r2, r0, r2
 8003a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a58:	460a      	mov	r2, r1
 8003a5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5e:	4413      	add	r3, r2
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	2200      	movs	r2, #0
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	61fa      	str	r2, [r7, #28]
 8003a6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a72:	f7fc fc5d 	bl	8000330 <__aeabi_uldivmod>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7e:	e053      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a80:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	2200      	movs	r2, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	617a      	str	r2, [r7, #20]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a92:	f04f 0b00 	mov.w	fp, #0
 8003a96:	4652      	mov	r2, sl
 8003a98:	465b      	mov	r3, fp
 8003a9a:	f04f 0000 	mov.w	r0, #0
 8003a9e:	f04f 0100 	mov.w	r1, #0
 8003aa2:	0159      	lsls	r1, r3, #5
 8003aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa8:	0150      	lsls	r0, r2, #5
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	ebb2 080a 	subs.w	r8, r2, sl
 8003ab2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ac2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ac6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003aca:	ebb2 0408 	subs.w	r4, r2, r8
 8003ace:	eb63 0509 	sbc.w	r5, r3, r9
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	00eb      	lsls	r3, r5, #3
 8003adc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ae0:	00e2      	lsls	r2, r4, #3
 8003ae2:	4614      	mov	r4, r2
 8003ae4:	461d      	mov	r5, r3
 8003ae6:	eb14 030a 	adds.w	r3, r4, sl
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	eb45 030b 	adc.w	r3, r5, fp
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afe:	4629      	mov	r1, r5
 8003b00:	028b      	lsls	r3, r1, #10
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b08:	4621      	mov	r1, r4
 8003b0a:	028a      	lsls	r2, r1, #10
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	2200      	movs	r2, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	60fa      	str	r2, [r7, #12]
 8003b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b1c:	f7fc fc08 	bl	8000330 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3740      	adds	r7, #64	; 0x40
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	017d7840 	.word	0x017d7840

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000000 	.word	0x20000000

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a9b      	lsrs	r3, r3, #10
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08005424 	.word	0x08005424

08003ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ba8:	f7ff ffdc 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0b5b      	lsrs	r3, r3, #13
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08005424 	.word	0x08005424

08003bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e041      	b.n	8003c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd fcf6 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f000 fa2e 	bl	800406c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d122      	bne.n	8003cc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d11b      	bne.n	8003cc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f06f 0202 	mvn.w	r2, #2
 8003c96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f9bf 	bl	8004030 <HAL_TIM_IC_CaptureCallback>
 8003cb2:	e005      	b.n	8003cc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f9b1 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f9c2 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d122      	bne.n	8003d1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d11b      	bne.n	8003d1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f06f 0204 	mvn.w	r2, #4
 8003cea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f995 	bl	8004030 <HAL_TIM_IC_CaptureCallback>
 8003d06:	e005      	b.n	8003d14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f987 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f998 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d122      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d11b      	bne.n	8003d6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0208 	mvn.w	r2, #8
 8003d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2204      	movs	r2, #4
 8003d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f96b 	bl	8004030 <HAL_TIM_IC_CaptureCallback>
 8003d5a:	e005      	b.n	8003d68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f95d 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f96e 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d122      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d11b      	bne.n	8003dc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f06f 0210 	mvn.w	r2, #16
 8003d92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2208      	movs	r2, #8
 8003d98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f941 	bl	8004030 <HAL_TIM_IC_CaptureCallback>
 8003dae:	e005      	b.n	8003dbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f933 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f944 	bl	8004044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d10e      	bne.n	8003dee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f06f 0201 	mvn.w	r2, #1
 8003de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f90d 	bl	8004008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df8:	2b80      	cmp	r3, #128	; 0x80
 8003dfa:	d10e      	bne.n	8003e1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b80      	cmp	r3, #128	; 0x80
 8003e08:	d107      	bne.n	8003e1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fa4d 	bl	80042b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	d10e      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d107      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f909 	bl	8004058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d10e      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f06f 0220 	mvn.w	r2, #32
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa17 	bl	80042a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_ConfigClockSource+0x1c>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0b4      	b.n	8004000 <HAL_TIM_ConfigClockSource+0x186>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eb4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ebc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ece:	d03e      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0xd4>
 8003ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed4:	f200 8087 	bhi.w	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003edc:	f000 8086 	beq.w	8003fec <HAL_TIM_ConfigClockSource+0x172>
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee4:	d87f      	bhi.n	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee6:	2b70      	cmp	r3, #112	; 0x70
 8003ee8:	d01a      	beq.n	8003f20 <HAL_TIM_ConfigClockSource+0xa6>
 8003eea:	2b70      	cmp	r3, #112	; 0x70
 8003eec:	d87b      	bhi.n	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
 8003eee:	2b60      	cmp	r3, #96	; 0x60
 8003ef0:	d050      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x11a>
 8003ef2:	2b60      	cmp	r3, #96	; 0x60
 8003ef4:	d877      	bhi.n	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef6:	2b50      	cmp	r3, #80	; 0x50
 8003ef8:	d03c      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0xfa>
 8003efa:	2b50      	cmp	r3, #80	; 0x50
 8003efc:	d873      	bhi.n	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d058      	beq.n	8003fb4 <HAL_TIM_ConfigClockSource+0x13a>
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d86f      	bhi.n	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d064      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0x15a>
 8003f0a:	2b30      	cmp	r3, #48	; 0x30
 8003f0c:	d86b      	bhi.n	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d060      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0x15a>
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d867      	bhi.n	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d05c      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0x15a>
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d05a      	beq.n	8003fd4 <HAL_TIM_ConfigClockSource+0x15a>
 8003f1e:	e062      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6899      	ldr	r1, [r3, #8]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f000 f996 	bl	8004260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
      break;
 8003f4c:	e04f      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f000 f97f 	bl	8004260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f70:	609a      	str	r2, [r3, #8]
      break;
 8003f72:	e03c      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	461a      	mov	r2, r3
 8003f82:	f000 f8f3 	bl	800416c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2150      	movs	r1, #80	; 0x50
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f94c 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003f92:	e02c      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f000 f912 	bl	80041ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2160      	movs	r1, #96	; 0x60
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f93c 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003fb2:	e01c      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6859      	ldr	r1, [r3, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f000 f8d3 	bl	800416c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2140      	movs	r1, #64	; 0x40
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f92c 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003fd2:	e00c      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 f923 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003fe4:	e003      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fea:	e000      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a34      	ldr	r2, [pc, #208]	; (8004150 <TIM_Base_SetConfig+0xe4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00f      	beq.n	80040a4 <TIM_Base_SetConfig+0x38>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408a:	d00b      	beq.n	80040a4 <TIM_Base_SetConfig+0x38>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a31      	ldr	r2, [pc, #196]	; (8004154 <TIM_Base_SetConfig+0xe8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d007      	beq.n	80040a4 <TIM_Base_SetConfig+0x38>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a30      	ldr	r2, [pc, #192]	; (8004158 <TIM_Base_SetConfig+0xec>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d003      	beq.n	80040a4 <TIM_Base_SetConfig+0x38>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a2f      	ldr	r2, [pc, #188]	; (800415c <TIM_Base_SetConfig+0xf0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d108      	bne.n	80040b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a25      	ldr	r2, [pc, #148]	; (8004150 <TIM_Base_SetConfig+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01b      	beq.n	80040f6 <TIM_Base_SetConfig+0x8a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c4:	d017      	beq.n	80040f6 <TIM_Base_SetConfig+0x8a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <TIM_Base_SetConfig+0xe8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <TIM_Base_SetConfig+0x8a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a21      	ldr	r2, [pc, #132]	; (8004158 <TIM_Base_SetConfig+0xec>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00f      	beq.n	80040f6 <TIM_Base_SetConfig+0x8a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <TIM_Base_SetConfig+0xf0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00b      	beq.n	80040f6 <TIM_Base_SetConfig+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <TIM_Base_SetConfig+0xf4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <TIM_Base_SetConfig+0x8a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <TIM_Base_SetConfig+0xf8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_Base_SetConfig+0x8a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <TIM_Base_SetConfig+0xfc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d108      	bne.n	8004108 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a08      	ldr	r2, [pc, #32]	; (8004150 <TIM_Base_SetConfig+0xe4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d103      	bne.n	800413c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	615a      	str	r2, [r3, #20]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800

0800416c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 030a 	bic.w	r3, r3, #10
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b087      	sub	sp, #28
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0210 	bic.w	r2, r3, #16
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	031b      	lsls	r3, r3, #12
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004206:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	f043 0307 	orr.w	r3, r3, #7
 800424c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800427a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	021a      	lsls	r2, r3, #8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	431a      	orrs	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4313      	orrs	r3, r2
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	609a      	str	r2, [r3, #8]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e03f      	b.n	800435a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd f9b6 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	; 0x24
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800430a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f929 	bl	8004564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b08a      	sub	sp, #40	; 0x28
 8004366:	af02      	add	r7, sp, #8
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b20      	cmp	r3, #32
 8004380:	d17c      	bne.n	800447c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_UART_Transmit+0x2c>
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e075      	b.n	800447e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Transmit+0x3e>
 800439c:	2302      	movs	r3, #2
 800439e:	e06e      	b.n	800447e <HAL_UART_Transmit+0x11c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2221      	movs	r2, #33	; 0x21
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043b6:	f7fd faaf 	bl	8001918 <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d108      	bne.n	80043e4 <HAL_UART_Transmit+0x82>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e003      	b.n	80043ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043f4:	e02a      	b.n	800444c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f840 	bl	8004486 <UART_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e036      	b.n	800447e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004424:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3302      	adds	r3, #2
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	e007      	b.n	800443e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	781a      	ldrb	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	3301      	adds	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1cf      	bne.n	80043f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2200      	movs	r2, #0
 800445e:	2140      	movs	r1, #64	; 0x40
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f810 	bl	8004486 <UART_WaitOnFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e006      	b.n	800447e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	e000      	b.n	800447e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800447c:	2302      	movs	r3, #2
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b090      	sub	sp, #64	; 0x40
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	4613      	mov	r3, r2
 8004494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004496:	e050      	b.n	800453a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d04c      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a6:	f7fd fa37 	bl	8001918 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d241      	bcs.n	800453a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d6:	637a      	str	r2, [r7, #52]	; 0x34
 80044d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	613b      	str	r3, [r7, #16]
   return(result);
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3314      	adds	r3, #20
 8004508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800450a:	623a      	str	r2, [r7, #32]
 800450c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	69f9      	ldr	r1, [r7, #28]
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	61bb      	str	r3, [r7, #24]
   return(result);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e5      	bne.n	80044ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e00f      	b.n	800455a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4013      	ands	r3, r2
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	bf0c      	ite	eq
 800454a:	2301      	moveq	r3, #1
 800454c:	2300      	movne	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	429a      	cmp	r2, r3
 8004556:	d09f      	beq.n	8004498 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3740      	adds	r7, #64	; 0x40
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004568:	b0c0      	sub	sp, #256	; 0x100
 800456a:	af00      	add	r7, sp, #0
 800456c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	68d9      	ldr	r1, [r3, #12]
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	ea40 0301 	orr.w	r3, r0, r1
 800458c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	431a      	orrs	r2, r3
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045bc:	f021 010c 	bic.w	r1, r1, #12
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ca:	430b      	orrs	r3, r1
 80045cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045de:	6999      	ldr	r1, [r3, #24]
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	ea40 0301 	orr.w	r3, r0, r1
 80045ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b8f      	ldr	r3, [pc, #572]	; (8004830 <UART_SetConfig+0x2cc>)
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d005      	beq.n	8004604 <UART_SetConfig+0xa0>
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b8d      	ldr	r3, [pc, #564]	; (8004834 <UART_SetConfig+0x2d0>)
 8004600:	429a      	cmp	r2, r3
 8004602:	d104      	bne.n	800460e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7ff face 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004608:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800460c:	e003      	b.n	8004616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800460e:	f7ff fab5 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004612:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004620:	f040 810c 	bne.w	800483c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800462e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004636:	4622      	mov	r2, r4
 8004638:	462b      	mov	r3, r5
 800463a:	1891      	adds	r1, r2, r2
 800463c:	65b9      	str	r1, [r7, #88]	; 0x58
 800463e:	415b      	adcs	r3, r3
 8004640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004646:	4621      	mov	r1, r4
 8004648:	eb12 0801 	adds.w	r8, r2, r1
 800464c:	4629      	mov	r1, r5
 800464e:	eb43 0901 	adc.w	r9, r3, r1
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004666:	4690      	mov	r8, r2
 8004668:	4699      	mov	r9, r3
 800466a:	4623      	mov	r3, r4
 800466c:	eb18 0303 	adds.w	r3, r8, r3
 8004670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004674:	462b      	mov	r3, r5
 8004676:	eb49 0303 	adc.w	r3, r9, r3
 800467a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800468a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800468e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004692:	460b      	mov	r3, r1
 8004694:	18db      	adds	r3, r3, r3
 8004696:	653b      	str	r3, [r7, #80]	; 0x50
 8004698:	4613      	mov	r3, r2
 800469a:	eb42 0303 	adc.w	r3, r2, r3
 800469e:	657b      	str	r3, [r7, #84]	; 0x54
 80046a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046a8:	f7fb fe42 	bl	8000330 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4b61      	ldr	r3, [pc, #388]	; (8004838 <UART_SetConfig+0x2d4>)
 80046b2:	fba3 2302 	umull	r2, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	011c      	lsls	r4, r3, #4
 80046ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046cc:	4642      	mov	r2, r8
 80046ce:	464b      	mov	r3, r9
 80046d0:	1891      	adds	r1, r2, r2
 80046d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80046d4:	415b      	adcs	r3, r3
 80046d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046dc:	4641      	mov	r1, r8
 80046de:	eb12 0a01 	adds.w	sl, r2, r1
 80046e2:	4649      	mov	r1, r9
 80046e4:	eb43 0b01 	adc.w	fp, r3, r1
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046fc:	4692      	mov	sl, r2
 80046fe:	469b      	mov	fp, r3
 8004700:	4643      	mov	r3, r8
 8004702:	eb1a 0303 	adds.w	r3, sl, r3
 8004706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800470a:	464b      	mov	r3, r9
 800470c:	eb4b 0303 	adc.w	r3, fp, r3
 8004710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004720:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004728:	460b      	mov	r3, r1
 800472a:	18db      	adds	r3, r3, r3
 800472c:	643b      	str	r3, [r7, #64]	; 0x40
 800472e:	4613      	mov	r3, r2
 8004730:	eb42 0303 	adc.w	r3, r2, r3
 8004734:	647b      	str	r3, [r7, #68]	; 0x44
 8004736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800473a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800473e:	f7fb fdf7 	bl	8000330 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4611      	mov	r1, r2
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <UART_SetConfig+0x2d4>)
 800474a:	fba3 2301 	umull	r2, r3, r3, r1
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2264      	movs	r2, #100	; 0x64
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	1acb      	subs	r3, r1, r3
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800475e:	4b36      	ldr	r3, [pc, #216]	; (8004838 <UART_SetConfig+0x2d4>)
 8004760:	fba3 2302 	umull	r2, r3, r3, r2
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800476c:	441c      	add	r4, r3
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004778:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800477c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	1891      	adds	r1, r2, r2
 8004786:	63b9      	str	r1, [r7, #56]	; 0x38
 8004788:	415b      	adcs	r3, r3
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004790:	4641      	mov	r1, r8
 8004792:	1851      	adds	r1, r2, r1
 8004794:	6339      	str	r1, [r7, #48]	; 0x30
 8004796:	4649      	mov	r1, r9
 8004798:	414b      	adcs	r3, r1
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047a8:	4659      	mov	r1, fp
 80047aa:	00cb      	lsls	r3, r1, #3
 80047ac:	4651      	mov	r1, sl
 80047ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b2:	4651      	mov	r1, sl
 80047b4:	00ca      	lsls	r2, r1, #3
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	4642      	mov	r2, r8
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047c4:	464b      	mov	r3, r9
 80047c6:	460a      	mov	r2, r1
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047e4:	460b      	mov	r3, r1
 80047e6:	18db      	adds	r3, r3, r3
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ea:	4613      	mov	r3, r2
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047fa:	f7fb fd99 	bl	8000330 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4b0d      	ldr	r3, [pc, #52]	; (8004838 <UART_SetConfig+0x2d4>)
 8004804:	fba3 1302 	umull	r1, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2164      	movs	r1, #100	; 0x64
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	3332      	adds	r3, #50	; 0x32
 8004816:	4a08      	ldr	r2, [pc, #32]	; (8004838 <UART_SetConfig+0x2d4>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 0207 	and.w	r2, r3, #7
 8004822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4422      	add	r2, r4
 800482a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800482c:	e105      	b.n	8004a3a <UART_SetConfig+0x4d6>
 800482e:	bf00      	nop
 8004830:	40011000 	.word	0x40011000
 8004834:	40011400 	.word	0x40011400
 8004838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800483c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004840:	2200      	movs	r2, #0
 8004842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004846:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800484a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800484e:	4642      	mov	r2, r8
 8004850:	464b      	mov	r3, r9
 8004852:	1891      	adds	r1, r2, r2
 8004854:	6239      	str	r1, [r7, #32]
 8004856:	415b      	adcs	r3, r3
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
 800485a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485e:	4641      	mov	r1, r8
 8004860:	1854      	adds	r4, r2, r1
 8004862:	4649      	mov	r1, r9
 8004864:	eb43 0501 	adc.w	r5, r3, r1
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	00eb      	lsls	r3, r5, #3
 8004872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004876:	00e2      	lsls	r2, r4, #3
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4643      	mov	r3, r8
 800487e:	18e3      	adds	r3, r4, r3
 8004880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004884:	464b      	mov	r3, r9
 8004886:	eb45 0303 	adc.w	r3, r5, r3
 800488a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800489a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048aa:	4629      	mov	r1, r5
 80048ac:	008b      	lsls	r3, r1, #2
 80048ae:	4621      	mov	r1, r4
 80048b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b4:	4621      	mov	r1, r4
 80048b6:	008a      	lsls	r2, r1, #2
 80048b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048bc:	f7fb fd38 	bl	8000330 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4b60      	ldr	r3, [pc, #384]	; (8004a48 <UART_SetConfig+0x4e4>)
 80048c6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	011c      	lsls	r4, r3, #4
 80048ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048d2:	2200      	movs	r2, #0
 80048d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048e0:	4642      	mov	r2, r8
 80048e2:	464b      	mov	r3, r9
 80048e4:	1891      	adds	r1, r2, r2
 80048e6:	61b9      	str	r1, [r7, #24]
 80048e8:	415b      	adcs	r3, r3
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048f0:	4641      	mov	r1, r8
 80048f2:	1851      	adds	r1, r2, r1
 80048f4:	6139      	str	r1, [r7, #16]
 80048f6:	4649      	mov	r1, r9
 80048f8:	414b      	adcs	r3, r1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004908:	4659      	mov	r1, fp
 800490a:	00cb      	lsls	r3, r1, #3
 800490c:	4651      	mov	r1, sl
 800490e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004912:	4651      	mov	r1, sl
 8004914:	00ca      	lsls	r2, r1, #3
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	4603      	mov	r3, r0
 800491c:	4642      	mov	r2, r8
 800491e:	189b      	adds	r3, r3, r2
 8004920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004924:	464b      	mov	r3, r9
 8004926:	460a      	mov	r2, r1
 8004928:	eb42 0303 	adc.w	r3, r2, r3
 800492c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	67bb      	str	r3, [r7, #120]	; 0x78
 800493a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004948:	4649      	mov	r1, r9
 800494a:	008b      	lsls	r3, r1, #2
 800494c:	4641      	mov	r1, r8
 800494e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004952:	4641      	mov	r1, r8
 8004954:	008a      	lsls	r2, r1, #2
 8004956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800495a:	f7fb fce9 	bl	8000330 <__aeabi_uldivmod>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4b39      	ldr	r3, [pc, #228]	; (8004a48 <UART_SetConfig+0x4e4>)
 8004964:	fba3 1302 	umull	r1, r3, r3, r2
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	2164      	movs	r1, #100	; 0x64
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	3332      	adds	r3, #50	; 0x32
 8004976:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <UART_SetConfig+0x4e4>)
 8004978:	fba2 2303 	umull	r2, r3, r2, r3
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004982:	441c      	add	r4, r3
 8004984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004988:	2200      	movs	r2, #0
 800498a:	673b      	str	r3, [r7, #112]	; 0x70
 800498c:	677a      	str	r2, [r7, #116]	; 0x74
 800498e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004992:	4642      	mov	r2, r8
 8004994:	464b      	mov	r3, r9
 8004996:	1891      	adds	r1, r2, r2
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	415b      	adcs	r3, r3
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a2:	4641      	mov	r1, r8
 80049a4:	1851      	adds	r1, r2, r1
 80049a6:	6039      	str	r1, [r7, #0]
 80049a8:	4649      	mov	r1, r9
 80049aa:	414b      	adcs	r3, r1
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049ba:	4659      	mov	r1, fp
 80049bc:	00cb      	lsls	r3, r1, #3
 80049be:	4651      	mov	r1, sl
 80049c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c4:	4651      	mov	r1, sl
 80049c6:	00ca      	lsls	r2, r1, #3
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	4603      	mov	r3, r0
 80049ce:	4642      	mov	r2, r8
 80049d0:	189b      	adds	r3, r3, r2
 80049d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d4:	464b      	mov	r3, r9
 80049d6:	460a      	mov	r2, r1
 80049d8:	eb42 0303 	adc.w	r3, r2, r3
 80049dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	663b      	str	r3, [r7, #96]	; 0x60
 80049e8:	667a      	str	r2, [r7, #100]	; 0x64
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049f6:	4649      	mov	r1, r9
 80049f8:	008b      	lsls	r3, r1, #2
 80049fa:	4641      	mov	r1, r8
 80049fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a00:	4641      	mov	r1, r8
 8004a02:	008a      	lsls	r2, r1, #2
 8004a04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a08:	f7fb fc92 	bl	8000330 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <UART_SetConfig+0x4e4>)
 8004a12:	fba3 1302 	umull	r1, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	2164      	movs	r1, #100	; 0x64
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	3332      	adds	r3, #50	; 0x32
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <UART_SetConfig+0x4e4>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4422      	add	r2, r4
 8004a38:	609a      	str	r2, [r3, #8]
}
 8004a3a:	bf00      	nop
 8004a3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a40:	46bd      	mov	sp, r7
 8004a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a46:	bf00      	nop
 8004a48:	51eb851f 	.word	0x51eb851f

08004a4c <__errno>:
 8004a4c:	4b01      	ldr	r3, [pc, #4]	; (8004a54 <__errno+0x8>)
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <__libc_init_array>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4d0d      	ldr	r5, [pc, #52]	; (8004a90 <__libc_init_array+0x38>)
 8004a5c:	4c0d      	ldr	r4, [pc, #52]	; (8004a94 <__libc_init_array+0x3c>)
 8004a5e:	1b64      	subs	r4, r4, r5
 8004a60:	10a4      	asrs	r4, r4, #2
 8004a62:	2600      	movs	r6, #0
 8004a64:	42a6      	cmp	r6, r4
 8004a66:	d109      	bne.n	8004a7c <__libc_init_array+0x24>
 8004a68:	4d0b      	ldr	r5, [pc, #44]	; (8004a98 <__libc_init_array+0x40>)
 8004a6a:	4c0c      	ldr	r4, [pc, #48]	; (8004a9c <__libc_init_array+0x44>)
 8004a6c:	f000 fcae 	bl	80053cc <_init>
 8004a70:	1b64      	subs	r4, r4, r5
 8004a72:	10a4      	asrs	r4, r4, #2
 8004a74:	2600      	movs	r6, #0
 8004a76:	42a6      	cmp	r6, r4
 8004a78:	d105      	bne.n	8004a86 <__libc_init_array+0x2e>
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a80:	4798      	blx	r3
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7ee      	b.n	8004a64 <__libc_init_array+0xc>
 8004a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8a:	4798      	blx	r3
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	e7f2      	b.n	8004a76 <__libc_init_array+0x1e>
 8004a90:	08005468 	.word	0x08005468
 8004a94:	08005468 	.word	0x08005468
 8004a98:	08005468 	.word	0x08005468
 8004a9c:	0800546c 	.word	0x0800546c

08004aa0 <memset>:
 8004aa0:	4402      	add	r2, r0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <memset+0xa>
 8004aa8:	4770      	bx	lr
 8004aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004aae:	e7f9      	b.n	8004aa4 <memset+0x4>

08004ab0 <sniprintf>:
 8004ab0:	b40c      	push	{r2, r3}
 8004ab2:	b530      	push	{r4, r5, lr}
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <sniprintf+0x64>)
 8004ab6:	1e0c      	subs	r4, r1, #0
 8004ab8:	681d      	ldr	r5, [r3, #0]
 8004aba:	b09d      	sub	sp, #116	; 0x74
 8004abc:	da08      	bge.n	8004ad0 <sniprintf+0x20>
 8004abe:	238b      	movs	r3, #139	; 0x8b
 8004ac0:	602b      	str	r3, [r5, #0]
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac6:	b01d      	add	sp, #116	; 0x74
 8004ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004acc:	b002      	add	sp, #8
 8004ace:	4770      	bx	lr
 8004ad0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004ad4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ad8:	bf14      	ite	ne
 8004ada:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004ade:	4623      	moveq	r3, r4
 8004ae0:	9304      	str	r3, [sp, #16]
 8004ae2:	9307      	str	r3, [sp, #28]
 8004ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ae8:	9002      	str	r0, [sp, #8]
 8004aea:	9006      	str	r0, [sp, #24]
 8004aec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004af0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004af2:	ab21      	add	r3, sp, #132	; 0x84
 8004af4:	a902      	add	r1, sp, #8
 8004af6:	4628      	mov	r0, r5
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	f000 f875 	bl	8004be8 <_svfiprintf_r>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	bfbc      	itt	lt
 8004b02:	238b      	movlt	r3, #139	; 0x8b
 8004b04:	602b      	strlt	r3, [r5, #0]
 8004b06:	2c00      	cmp	r4, #0
 8004b08:	d0dd      	beq.n	8004ac6 <sniprintf+0x16>
 8004b0a:	9b02      	ldr	r3, [sp, #8]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	e7d9      	b.n	8004ac6 <sniprintf+0x16>
 8004b12:	bf00      	nop
 8004b14:	2000000c 	.word	0x2000000c

08004b18 <strnlen>:
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4401      	add	r1, r0
 8004b1e:	428a      	cmp	r2, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	d003      	beq.n	8004b2c <strnlen+0x14>
 8004b24:	781c      	ldrb	r4, [r3, #0]
 8004b26:	3201      	adds	r2, #1
 8004b28:	2c00      	cmp	r4, #0
 8004b2a:	d1f8      	bne.n	8004b1e <strnlen+0x6>
 8004b2c:	1a18      	subs	r0, r3, r0
 8004b2e:	bd10      	pop	{r4, pc}

08004b30 <__ssputs_r>:
 8004b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b34:	688e      	ldr	r6, [r1, #8]
 8004b36:	429e      	cmp	r6, r3
 8004b38:	4682      	mov	sl, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	4690      	mov	r8, r2
 8004b3e:	461f      	mov	r7, r3
 8004b40:	d838      	bhi.n	8004bb4 <__ssputs_r+0x84>
 8004b42:	898a      	ldrh	r2, [r1, #12]
 8004b44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b48:	d032      	beq.n	8004bb0 <__ssputs_r+0x80>
 8004b4a:	6825      	ldr	r5, [r4, #0]
 8004b4c:	6909      	ldr	r1, [r1, #16]
 8004b4e:	eba5 0901 	sub.w	r9, r5, r1
 8004b52:	6965      	ldr	r5, [r4, #20]
 8004b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	444b      	add	r3, r9
 8004b60:	106d      	asrs	r5, r5, #1
 8004b62:	429d      	cmp	r5, r3
 8004b64:	bf38      	it	cc
 8004b66:	461d      	movcc	r5, r3
 8004b68:	0553      	lsls	r3, r2, #21
 8004b6a:	d531      	bpl.n	8004bd0 <__ssputs_r+0xa0>
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	f000 fb63 	bl	8005238 <_malloc_r>
 8004b72:	4606      	mov	r6, r0
 8004b74:	b950      	cbnz	r0, 8004b8c <__ssputs_r+0x5c>
 8004b76:	230c      	movs	r3, #12
 8004b78:	f8ca 3000 	str.w	r3, [sl]
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b82:	81a3      	strh	r3, [r4, #12]
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b8c:	6921      	ldr	r1, [r4, #16]
 8004b8e:	464a      	mov	r2, r9
 8004b90:	f000 fabe 	bl	8005110 <memcpy>
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9e:	81a3      	strh	r3, [r4, #12]
 8004ba0:	6126      	str	r6, [r4, #16]
 8004ba2:	6165      	str	r5, [r4, #20]
 8004ba4:	444e      	add	r6, r9
 8004ba6:	eba5 0509 	sub.w	r5, r5, r9
 8004baa:	6026      	str	r6, [r4, #0]
 8004bac:	60a5      	str	r5, [r4, #8]
 8004bae:	463e      	mov	r6, r7
 8004bb0:	42be      	cmp	r6, r7
 8004bb2:	d900      	bls.n	8004bb6 <__ssputs_r+0x86>
 8004bb4:	463e      	mov	r6, r7
 8004bb6:	6820      	ldr	r0, [r4, #0]
 8004bb8:	4632      	mov	r2, r6
 8004bba:	4641      	mov	r1, r8
 8004bbc:	f000 fab6 	bl	800512c <memmove>
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	1b9b      	subs	r3, r3, r6
 8004bc4:	60a3      	str	r3, [r4, #8]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	4433      	add	r3, r6
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e7db      	b.n	8004b88 <__ssputs_r+0x58>
 8004bd0:	462a      	mov	r2, r5
 8004bd2:	f000 fba5 	bl	8005320 <_realloc_r>
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d1e1      	bne.n	8004ba0 <__ssputs_r+0x70>
 8004bdc:	6921      	ldr	r1, [r4, #16]
 8004bde:	4650      	mov	r0, sl
 8004be0:	f000 fabe 	bl	8005160 <_free_r>
 8004be4:	e7c7      	b.n	8004b76 <__ssputs_r+0x46>
	...

08004be8 <_svfiprintf_r>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	4698      	mov	r8, r3
 8004bee:	898b      	ldrh	r3, [r1, #12]
 8004bf0:	061b      	lsls	r3, r3, #24
 8004bf2:	b09d      	sub	sp, #116	; 0x74
 8004bf4:	4607      	mov	r7, r0
 8004bf6:	460d      	mov	r5, r1
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	d50e      	bpl.n	8004c1a <_svfiprintf_r+0x32>
 8004bfc:	690b      	ldr	r3, [r1, #16]
 8004bfe:	b963      	cbnz	r3, 8004c1a <_svfiprintf_r+0x32>
 8004c00:	2140      	movs	r1, #64	; 0x40
 8004c02:	f000 fb19 	bl	8005238 <_malloc_r>
 8004c06:	6028      	str	r0, [r5, #0]
 8004c08:	6128      	str	r0, [r5, #16]
 8004c0a:	b920      	cbnz	r0, 8004c16 <_svfiprintf_r+0x2e>
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	e0d1      	b.n	8004dba <_svfiprintf_r+0x1d2>
 8004c16:	2340      	movs	r3, #64	; 0x40
 8004c18:	616b      	str	r3, [r5, #20]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1e:	2320      	movs	r3, #32
 8004c20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c28:	2330      	movs	r3, #48	; 0x30
 8004c2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004dd4 <_svfiprintf_r+0x1ec>
 8004c2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c32:	f04f 0901 	mov.w	r9, #1
 8004c36:	4623      	mov	r3, r4
 8004c38:	469a      	mov	sl, r3
 8004c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c3e:	b10a      	cbz	r2, 8004c44 <_svfiprintf_r+0x5c>
 8004c40:	2a25      	cmp	r2, #37	; 0x25
 8004c42:	d1f9      	bne.n	8004c38 <_svfiprintf_r+0x50>
 8004c44:	ebba 0b04 	subs.w	fp, sl, r4
 8004c48:	d00b      	beq.n	8004c62 <_svfiprintf_r+0x7a>
 8004c4a:	465b      	mov	r3, fp
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	4629      	mov	r1, r5
 8004c50:	4638      	mov	r0, r7
 8004c52:	f7ff ff6d 	bl	8004b30 <__ssputs_r>
 8004c56:	3001      	adds	r0, #1
 8004c58:	f000 80aa 	beq.w	8004db0 <_svfiprintf_r+0x1c8>
 8004c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c5e:	445a      	add	r2, fp
 8004c60:	9209      	str	r2, [sp, #36]	; 0x24
 8004c62:	f89a 3000 	ldrb.w	r3, [sl]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80a2 	beq.w	8004db0 <_svfiprintf_r+0x1c8>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c76:	f10a 0a01 	add.w	sl, sl, #1
 8004c7a:	9304      	str	r3, [sp, #16]
 8004c7c:	9307      	str	r3, [sp, #28]
 8004c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c82:	931a      	str	r3, [sp, #104]	; 0x68
 8004c84:	4654      	mov	r4, sl
 8004c86:	2205      	movs	r2, #5
 8004c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8c:	4851      	ldr	r0, [pc, #324]	; (8004dd4 <_svfiprintf_r+0x1ec>)
 8004c8e:	f7fb faaf 	bl	80001f0 <memchr>
 8004c92:	9a04      	ldr	r2, [sp, #16]
 8004c94:	b9d8      	cbnz	r0, 8004cce <_svfiprintf_r+0xe6>
 8004c96:	06d0      	lsls	r0, r2, #27
 8004c98:	bf44      	itt	mi
 8004c9a:	2320      	movmi	r3, #32
 8004c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ca0:	0711      	lsls	r1, r2, #28
 8004ca2:	bf44      	itt	mi
 8004ca4:	232b      	movmi	r3, #43	; 0x2b
 8004ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004caa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cae:	2b2a      	cmp	r3, #42	; 0x2a
 8004cb0:	d015      	beq.n	8004cde <_svfiprintf_r+0xf6>
 8004cb2:	9a07      	ldr	r2, [sp, #28]
 8004cb4:	4654      	mov	r4, sl
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f04f 0c0a 	mov.w	ip, #10
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cc2:	3b30      	subs	r3, #48	; 0x30
 8004cc4:	2b09      	cmp	r3, #9
 8004cc6:	d94e      	bls.n	8004d66 <_svfiprintf_r+0x17e>
 8004cc8:	b1b0      	cbz	r0, 8004cf8 <_svfiprintf_r+0x110>
 8004cca:	9207      	str	r2, [sp, #28]
 8004ccc:	e014      	b.n	8004cf8 <_svfiprintf_r+0x110>
 8004cce:	eba0 0308 	sub.w	r3, r0, r8
 8004cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	9304      	str	r3, [sp, #16]
 8004cda:	46a2      	mov	sl, r4
 8004cdc:	e7d2      	b.n	8004c84 <_svfiprintf_r+0x9c>
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	1d19      	adds	r1, r3, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	9103      	str	r1, [sp, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bfbb      	ittet	lt
 8004cea:	425b      	neglt	r3, r3
 8004cec:	f042 0202 	orrlt.w	r2, r2, #2
 8004cf0:	9307      	strge	r3, [sp, #28]
 8004cf2:	9307      	strlt	r3, [sp, #28]
 8004cf4:	bfb8      	it	lt
 8004cf6:	9204      	strlt	r2, [sp, #16]
 8004cf8:	7823      	ldrb	r3, [r4, #0]
 8004cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8004cfc:	d10c      	bne.n	8004d18 <_svfiprintf_r+0x130>
 8004cfe:	7863      	ldrb	r3, [r4, #1]
 8004d00:	2b2a      	cmp	r3, #42	; 0x2a
 8004d02:	d135      	bne.n	8004d70 <_svfiprintf_r+0x188>
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	9203      	str	r2, [sp, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	bfb8      	it	lt
 8004d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d14:	3402      	adds	r4, #2
 8004d16:	9305      	str	r3, [sp, #20]
 8004d18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004de4 <_svfiprintf_r+0x1fc>
 8004d1c:	7821      	ldrb	r1, [r4, #0]
 8004d1e:	2203      	movs	r2, #3
 8004d20:	4650      	mov	r0, sl
 8004d22:	f7fb fa65 	bl	80001f0 <memchr>
 8004d26:	b140      	cbz	r0, 8004d3a <_svfiprintf_r+0x152>
 8004d28:	2340      	movs	r3, #64	; 0x40
 8004d2a:	eba0 000a 	sub.w	r0, r0, sl
 8004d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d32:	9b04      	ldr	r3, [sp, #16]
 8004d34:	4303      	orrs	r3, r0
 8004d36:	3401      	adds	r4, #1
 8004d38:	9304      	str	r3, [sp, #16]
 8004d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d3e:	4826      	ldr	r0, [pc, #152]	; (8004dd8 <_svfiprintf_r+0x1f0>)
 8004d40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d44:	2206      	movs	r2, #6
 8004d46:	f7fb fa53 	bl	80001f0 <memchr>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d038      	beq.n	8004dc0 <_svfiprintf_r+0x1d8>
 8004d4e:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <_svfiprintf_r+0x1f4>)
 8004d50:	bb1b      	cbnz	r3, 8004d9a <_svfiprintf_r+0x1b2>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	3307      	adds	r3, #7
 8004d56:	f023 0307 	bic.w	r3, r3, #7
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	9303      	str	r3, [sp, #12]
 8004d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d60:	4433      	add	r3, r6
 8004d62:	9309      	str	r3, [sp, #36]	; 0x24
 8004d64:	e767      	b.n	8004c36 <_svfiprintf_r+0x4e>
 8004d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	2001      	movs	r0, #1
 8004d6e:	e7a5      	b.n	8004cbc <_svfiprintf_r+0xd4>
 8004d70:	2300      	movs	r3, #0
 8004d72:	3401      	adds	r4, #1
 8004d74:	9305      	str	r3, [sp, #20]
 8004d76:	4619      	mov	r1, r3
 8004d78:	f04f 0c0a 	mov.w	ip, #10
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d82:	3a30      	subs	r2, #48	; 0x30
 8004d84:	2a09      	cmp	r2, #9
 8004d86:	d903      	bls.n	8004d90 <_svfiprintf_r+0x1a8>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0c5      	beq.n	8004d18 <_svfiprintf_r+0x130>
 8004d8c:	9105      	str	r1, [sp, #20]
 8004d8e:	e7c3      	b.n	8004d18 <_svfiprintf_r+0x130>
 8004d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d94:	4604      	mov	r4, r0
 8004d96:	2301      	movs	r3, #1
 8004d98:	e7f0      	b.n	8004d7c <_svfiprintf_r+0x194>
 8004d9a:	ab03      	add	r3, sp, #12
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	462a      	mov	r2, r5
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <_svfiprintf_r+0x1f8>)
 8004da2:	a904      	add	r1, sp, #16
 8004da4:	4638      	mov	r0, r7
 8004da6:	f3af 8000 	nop.w
 8004daa:	1c42      	adds	r2, r0, #1
 8004dac:	4606      	mov	r6, r0
 8004dae:	d1d6      	bne.n	8004d5e <_svfiprintf_r+0x176>
 8004db0:	89ab      	ldrh	r3, [r5, #12]
 8004db2:	065b      	lsls	r3, r3, #25
 8004db4:	f53f af2c 	bmi.w	8004c10 <_svfiprintf_r+0x28>
 8004db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dba:	b01d      	add	sp, #116	; 0x74
 8004dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc0:	ab03      	add	r3, sp, #12
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	462a      	mov	r2, r5
 8004dc6:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <_svfiprintf_r+0x1f8>)
 8004dc8:	a904      	add	r1, sp, #16
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f000 f87a 	bl	8004ec4 <_printf_i>
 8004dd0:	e7eb      	b.n	8004daa <_svfiprintf_r+0x1c2>
 8004dd2:	bf00      	nop
 8004dd4:	0800542c 	.word	0x0800542c
 8004dd8:	08005436 	.word	0x08005436
 8004ddc:	00000000 	.word	0x00000000
 8004de0:	08004b31 	.word	0x08004b31
 8004de4:	08005432 	.word	0x08005432

08004de8 <_printf_common>:
 8004de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	4616      	mov	r6, r2
 8004dee:	4699      	mov	r9, r3
 8004df0:	688a      	ldr	r2, [r1, #8]
 8004df2:	690b      	ldr	r3, [r1, #16]
 8004df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	bfb8      	it	lt
 8004dfc:	4613      	movlt	r3, r2
 8004dfe:	6033      	str	r3, [r6, #0]
 8004e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e04:	4607      	mov	r7, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	b10a      	cbz	r2, 8004e0e <_printf_common+0x26>
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	6033      	str	r3, [r6, #0]
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	0699      	lsls	r1, r3, #26
 8004e12:	bf42      	ittt	mi
 8004e14:	6833      	ldrmi	r3, [r6, #0]
 8004e16:	3302      	addmi	r3, #2
 8004e18:	6033      	strmi	r3, [r6, #0]
 8004e1a:	6825      	ldr	r5, [r4, #0]
 8004e1c:	f015 0506 	ands.w	r5, r5, #6
 8004e20:	d106      	bne.n	8004e30 <_printf_common+0x48>
 8004e22:	f104 0a19 	add.w	sl, r4, #25
 8004e26:	68e3      	ldr	r3, [r4, #12]
 8004e28:	6832      	ldr	r2, [r6, #0]
 8004e2a:	1a9b      	subs	r3, r3, r2
 8004e2c:	42ab      	cmp	r3, r5
 8004e2e:	dc26      	bgt.n	8004e7e <_printf_common+0x96>
 8004e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e34:	1e13      	subs	r3, r2, #0
 8004e36:	6822      	ldr	r2, [r4, #0]
 8004e38:	bf18      	it	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	0692      	lsls	r2, r2, #26
 8004e3e:	d42b      	bmi.n	8004e98 <_printf_common+0xb0>
 8004e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e44:	4649      	mov	r1, r9
 8004e46:	4638      	mov	r0, r7
 8004e48:	47c0      	blx	r8
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d01e      	beq.n	8004e8c <_printf_common+0xa4>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	68e5      	ldr	r5, [r4, #12]
 8004e52:	6832      	ldr	r2, [r6, #0]
 8004e54:	f003 0306 	and.w	r3, r3, #6
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	bf08      	it	eq
 8004e5c:	1aad      	subeq	r5, r5, r2
 8004e5e:	68a3      	ldr	r3, [r4, #8]
 8004e60:	6922      	ldr	r2, [r4, #16]
 8004e62:	bf0c      	ite	eq
 8004e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e68:	2500      	movne	r5, #0
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	bfc4      	itt	gt
 8004e6e:	1a9b      	subgt	r3, r3, r2
 8004e70:	18ed      	addgt	r5, r5, r3
 8004e72:	2600      	movs	r6, #0
 8004e74:	341a      	adds	r4, #26
 8004e76:	42b5      	cmp	r5, r6
 8004e78:	d11a      	bne.n	8004eb0 <_printf_common+0xc8>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e008      	b.n	8004e90 <_printf_common+0xa8>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4652      	mov	r2, sl
 8004e82:	4649      	mov	r1, r9
 8004e84:	4638      	mov	r0, r7
 8004e86:	47c0      	blx	r8
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d103      	bne.n	8004e94 <_printf_common+0xac>
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e94:	3501      	adds	r5, #1
 8004e96:	e7c6      	b.n	8004e26 <_printf_common+0x3e>
 8004e98:	18e1      	adds	r1, r4, r3
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	2030      	movs	r0, #48	; 0x30
 8004e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ea2:	4422      	add	r2, r4
 8004ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004eac:	3302      	adds	r3, #2
 8004eae:	e7c7      	b.n	8004e40 <_printf_common+0x58>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	47c0      	blx	r8
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d0e6      	beq.n	8004e8c <_printf_common+0xa4>
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7d9      	b.n	8004e76 <_printf_common+0x8e>
	...

08004ec4 <_printf_i>:
 8004ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec8:	7e0f      	ldrb	r7, [r1, #24]
 8004eca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ecc:	2f78      	cmp	r7, #120	; 0x78
 8004ece:	4691      	mov	r9, r2
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	469a      	mov	sl, r3
 8004ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004eda:	d807      	bhi.n	8004eec <_printf_i+0x28>
 8004edc:	2f62      	cmp	r7, #98	; 0x62
 8004ede:	d80a      	bhi.n	8004ef6 <_printf_i+0x32>
 8004ee0:	2f00      	cmp	r7, #0
 8004ee2:	f000 80d8 	beq.w	8005096 <_printf_i+0x1d2>
 8004ee6:	2f58      	cmp	r7, #88	; 0x58
 8004ee8:	f000 80a3 	beq.w	8005032 <_printf_i+0x16e>
 8004eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ef4:	e03a      	b.n	8004f6c <_printf_i+0xa8>
 8004ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004efa:	2b15      	cmp	r3, #21
 8004efc:	d8f6      	bhi.n	8004eec <_printf_i+0x28>
 8004efe:	a101      	add	r1, pc, #4	; (adr r1, 8004f04 <_printf_i+0x40>)
 8004f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f04:	08004f5d 	.word	0x08004f5d
 8004f08:	08004f71 	.word	0x08004f71
 8004f0c:	08004eed 	.word	0x08004eed
 8004f10:	08004eed 	.word	0x08004eed
 8004f14:	08004eed 	.word	0x08004eed
 8004f18:	08004eed 	.word	0x08004eed
 8004f1c:	08004f71 	.word	0x08004f71
 8004f20:	08004eed 	.word	0x08004eed
 8004f24:	08004eed 	.word	0x08004eed
 8004f28:	08004eed 	.word	0x08004eed
 8004f2c:	08004eed 	.word	0x08004eed
 8004f30:	0800507d 	.word	0x0800507d
 8004f34:	08004fa1 	.word	0x08004fa1
 8004f38:	0800505f 	.word	0x0800505f
 8004f3c:	08004eed 	.word	0x08004eed
 8004f40:	08004eed 	.word	0x08004eed
 8004f44:	0800509f 	.word	0x0800509f
 8004f48:	08004eed 	.word	0x08004eed
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08004eed 	.word	0x08004eed
 8004f54:	08004eed 	.word	0x08004eed
 8004f58:	08005067 	.word	0x08005067
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	1d1a      	adds	r2, r3, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	602a      	str	r2, [r5, #0]
 8004f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0a3      	b.n	80050b8 <_printf_i+0x1f4>
 8004f70:	6820      	ldr	r0, [r4, #0]
 8004f72:	6829      	ldr	r1, [r5, #0]
 8004f74:	0606      	lsls	r6, r0, #24
 8004f76:	f101 0304 	add.w	r3, r1, #4
 8004f7a:	d50a      	bpl.n	8004f92 <_printf_i+0xce>
 8004f7c:	680e      	ldr	r6, [r1, #0]
 8004f7e:	602b      	str	r3, [r5, #0]
 8004f80:	2e00      	cmp	r6, #0
 8004f82:	da03      	bge.n	8004f8c <_printf_i+0xc8>
 8004f84:	232d      	movs	r3, #45	; 0x2d
 8004f86:	4276      	negs	r6, r6
 8004f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f8c:	485e      	ldr	r0, [pc, #376]	; (8005108 <_printf_i+0x244>)
 8004f8e:	230a      	movs	r3, #10
 8004f90:	e019      	b.n	8004fc6 <_printf_i+0x102>
 8004f92:	680e      	ldr	r6, [r1, #0]
 8004f94:	602b      	str	r3, [r5, #0]
 8004f96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f9a:	bf18      	it	ne
 8004f9c:	b236      	sxthne	r6, r6
 8004f9e:	e7ef      	b.n	8004f80 <_printf_i+0xbc>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	6820      	ldr	r0, [r4, #0]
 8004fa4:	1d19      	adds	r1, r3, #4
 8004fa6:	6029      	str	r1, [r5, #0]
 8004fa8:	0601      	lsls	r1, r0, #24
 8004faa:	d501      	bpl.n	8004fb0 <_printf_i+0xec>
 8004fac:	681e      	ldr	r6, [r3, #0]
 8004fae:	e002      	b.n	8004fb6 <_printf_i+0xf2>
 8004fb0:	0646      	lsls	r6, r0, #25
 8004fb2:	d5fb      	bpl.n	8004fac <_printf_i+0xe8>
 8004fb4:	881e      	ldrh	r6, [r3, #0]
 8004fb6:	4854      	ldr	r0, [pc, #336]	; (8005108 <_printf_i+0x244>)
 8004fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8004fba:	bf0c      	ite	eq
 8004fbc:	2308      	moveq	r3, #8
 8004fbe:	230a      	movne	r3, #10
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fc6:	6865      	ldr	r5, [r4, #4]
 8004fc8:	60a5      	str	r5, [r4, #8]
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	bfa2      	ittt	ge
 8004fce:	6821      	ldrge	r1, [r4, #0]
 8004fd0:	f021 0104 	bicge.w	r1, r1, #4
 8004fd4:	6021      	strge	r1, [r4, #0]
 8004fd6:	b90e      	cbnz	r6, 8004fdc <_printf_i+0x118>
 8004fd8:	2d00      	cmp	r5, #0
 8004fda:	d04d      	beq.n	8005078 <_printf_i+0x1b4>
 8004fdc:	4615      	mov	r5, r2
 8004fde:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fe2:	fb03 6711 	mls	r7, r3, r1, r6
 8004fe6:	5dc7      	ldrb	r7, [r0, r7]
 8004fe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fec:	4637      	mov	r7, r6
 8004fee:	42bb      	cmp	r3, r7
 8004ff0:	460e      	mov	r6, r1
 8004ff2:	d9f4      	bls.n	8004fde <_printf_i+0x11a>
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d10b      	bne.n	8005010 <_printf_i+0x14c>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	07de      	lsls	r6, r3, #31
 8004ffc:	d508      	bpl.n	8005010 <_printf_i+0x14c>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	6861      	ldr	r1, [r4, #4]
 8005002:	4299      	cmp	r1, r3
 8005004:	bfde      	ittt	le
 8005006:	2330      	movle	r3, #48	; 0x30
 8005008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800500c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005010:	1b52      	subs	r2, r2, r5
 8005012:	6122      	str	r2, [r4, #16]
 8005014:	f8cd a000 	str.w	sl, [sp]
 8005018:	464b      	mov	r3, r9
 800501a:	aa03      	add	r2, sp, #12
 800501c:	4621      	mov	r1, r4
 800501e:	4640      	mov	r0, r8
 8005020:	f7ff fee2 	bl	8004de8 <_printf_common>
 8005024:	3001      	adds	r0, #1
 8005026:	d14c      	bne.n	80050c2 <_printf_i+0x1fe>
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	b004      	add	sp, #16
 800502e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005032:	4835      	ldr	r0, [pc, #212]	; (8005108 <_printf_i+0x244>)
 8005034:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005038:	6829      	ldr	r1, [r5, #0]
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005040:	6029      	str	r1, [r5, #0]
 8005042:	061d      	lsls	r5, r3, #24
 8005044:	d514      	bpl.n	8005070 <_printf_i+0x1ac>
 8005046:	07df      	lsls	r7, r3, #31
 8005048:	bf44      	itt	mi
 800504a:	f043 0320 	orrmi.w	r3, r3, #32
 800504e:	6023      	strmi	r3, [r4, #0]
 8005050:	b91e      	cbnz	r6, 800505a <_printf_i+0x196>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	f023 0320 	bic.w	r3, r3, #32
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	2310      	movs	r3, #16
 800505c:	e7b0      	b.n	8004fc0 <_printf_i+0xfc>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	f043 0320 	orr.w	r3, r3, #32
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	2378      	movs	r3, #120	; 0x78
 8005068:	4828      	ldr	r0, [pc, #160]	; (800510c <_printf_i+0x248>)
 800506a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800506e:	e7e3      	b.n	8005038 <_printf_i+0x174>
 8005070:	0659      	lsls	r1, r3, #25
 8005072:	bf48      	it	mi
 8005074:	b2b6      	uxthmi	r6, r6
 8005076:	e7e6      	b.n	8005046 <_printf_i+0x182>
 8005078:	4615      	mov	r5, r2
 800507a:	e7bb      	b.n	8004ff4 <_printf_i+0x130>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	6826      	ldr	r6, [r4, #0]
 8005080:	6961      	ldr	r1, [r4, #20]
 8005082:	1d18      	adds	r0, r3, #4
 8005084:	6028      	str	r0, [r5, #0]
 8005086:	0635      	lsls	r5, r6, #24
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	d501      	bpl.n	8005090 <_printf_i+0x1cc>
 800508c:	6019      	str	r1, [r3, #0]
 800508e:	e002      	b.n	8005096 <_printf_i+0x1d2>
 8005090:	0670      	lsls	r0, r6, #25
 8005092:	d5fb      	bpl.n	800508c <_printf_i+0x1c8>
 8005094:	8019      	strh	r1, [r3, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	4615      	mov	r5, r2
 800509c:	e7ba      	b.n	8005014 <_printf_i+0x150>
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	1d1a      	adds	r2, r3, #4
 80050a2:	602a      	str	r2, [r5, #0]
 80050a4:	681d      	ldr	r5, [r3, #0]
 80050a6:	6862      	ldr	r2, [r4, #4]
 80050a8:	2100      	movs	r1, #0
 80050aa:	4628      	mov	r0, r5
 80050ac:	f7fb f8a0 	bl	80001f0 <memchr>
 80050b0:	b108      	cbz	r0, 80050b6 <_printf_i+0x1f2>
 80050b2:	1b40      	subs	r0, r0, r5
 80050b4:	6060      	str	r0, [r4, #4]
 80050b6:	6863      	ldr	r3, [r4, #4]
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	2300      	movs	r3, #0
 80050bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c0:	e7a8      	b.n	8005014 <_printf_i+0x150>
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	462a      	mov	r2, r5
 80050c6:	4649      	mov	r1, r9
 80050c8:	4640      	mov	r0, r8
 80050ca:	47d0      	blx	sl
 80050cc:	3001      	adds	r0, #1
 80050ce:	d0ab      	beq.n	8005028 <_printf_i+0x164>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	079b      	lsls	r3, r3, #30
 80050d4:	d413      	bmi.n	80050fe <_printf_i+0x23a>
 80050d6:	68e0      	ldr	r0, [r4, #12]
 80050d8:	9b03      	ldr	r3, [sp, #12]
 80050da:	4298      	cmp	r0, r3
 80050dc:	bfb8      	it	lt
 80050de:	4618      	movlt	r0, r3
 80050e0:	e7a4      	b.n	800502c <_printf_i+0x168>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4632      	mov	r2, r6
 80050e6:	4649      	mov	r1, r9
 80050e8:	4640      	mov	r0, r8
 80050ea:	47d0      	blx	sl
 80050ec:	3001      	adds	r0, #1
 80050ee:	d09b      	beq.n	8005028 <_printf_i+0x164>
 80050f0:	3501      	adds	r5, #1
 80050f2:	68e3      	ldr	r3, [r4, #12]
 80050f4:	9903      	ldr	r1, [sp, #12]
 80050f6:	1a5b      	subs	r3, r3, r1
 80050f8:	42ab      	cmp	r3, r5
 80050fa:	dcf2      	bgt.n	80050e2 <_printf_i+0x21e>
 80050fc:	e7eb      	b.n	80050d6 <_printf_i+0x212>
 80050fe:	2500      	movs	r5, #0
 8005100:	f104 0619 	add.w	r6, r4, #25
 8005104:	e7f5      	b.n	80050f2 <_printf_i+0x22e>
 8005106:	bf00      	nop
 8005108:	0800543d 	.word	0x0800543d
 800510c:	0800544e 	.word	0x0800544e

08005110 <memcpy>:
 8005110:	440a      	add	r2, r1
 8005112:	4291      	cmp	r1, r2
 8005114:	f100 33ff 	add.w	r3, r0, #4294967295
 8005118:	d100      	bne.n	800511c <memcpy+0xc>
 800511a:	4770      	bx	lr
 800511c:	b510      	push	{r4, lr}
 800511e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005126:	4291      	cmp	r1, r2
 8005128:	d1f9      	bne.n	800511e <memcpy+0xe>
 800512a:	bd10      	pop	{r4, pc}

0800512c <memmove>:
 800512c:	4288      	cmp	r0, r1
 800512e:	b510      	push	{r4, lr}
 8005130:	eb01 0402 	add.w	r4, r1, r2
 8005134:	d902      	bls.n	800513c <memmove+0x10>
 8005136:	4284      	cmp	r4, r0
 8005138:	4623      	mov	r3, r4
 800513a:	d807      	bhi.n	800514c <memmove+0x20>
 800513c:	1e43      	subs	r3, r0, #1
 800513e:	42a1      	cmp	r1, r4
 8005140:	d008      	beq.n	8005154 <memmove+0x28>
 8005142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800514a:	e7f8      	b.n	800513e <memmove+0x12>
 800514c:	4402      	add	r2, r0
 800514e:	4601      	mov	r1, r0
 8005150:	428a      	cmp	r2, r1
 8005152:	d100      	bne.n	8005156 <memmove+0x2a>
 8005154:	bd10      	pop	{r4, pc}
 8005156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800515a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800515e:	e7f7      	b.n	8005150 <memmove+0x24>

08005160 <_free_r>:
 8005160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005162:	2900      	cmp	r1, #0
 8005164:	d044      	beq.n	80051f0 <_free_r+0x90>
 8005166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800516a:	9001      	str	r0, [sp, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f1a1 0404 	sub.w	r4, r1, #4
 8005172:	bfb8      	it	lt
 8005174:	18e4      	addlt	r4, r4, r3
 8005176:	f000 f913 	bl	80053a0 <__malloc_lock>
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <_free_r+0x94>)
 800517c:	9801      	ldr	r0, [sp, #4]
 800517e:	6813      	ldr	r3, [r2, #0]
 8005180:	b933      	cbnz	r3, 8005190 <_free_r+0x30>
 8005182:	6063      	str	r3, [r4, #4]
 8005184:	6014      	str	r4, [r2, #0]
 8005186:	b003      	add	sp, #12
 8005188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800518c:	f000 b90e 	b.w	80053ac <__malloc_unlock>
 8005190:	42a3      	cmp	r3, r4
 8005192:	d908      	bls.n	80051a6 <_free_r+0x46>
 8005194:	6825      	ldr	r5, [r4, #0]
 8005196:	1961      	adds	r1, r4, r5
 8005198:	428b      	cmp	r3, r1
 800519a:	bf01      	itttt	eq
 800519c:	6819      	ldreq	r1, [r3, #0]
 800519e:	685b      	ldreq	r3, [r3, #4]
 80051a0:	1949      	addeq	r1, r1, r5
 80051a2:	6021      	streq	r1, [r4, #0]
 80051a4:	e7ed      	b.n	8005182 <_free_r+0x22>
 80051a6:	461a      	mov	r2, r3
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	b10b      	cbz	r3, 80051b0 <_free_r+0x50>
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	d9fa      	bls.n	80051a6 <_free_r+0x46>
 80051b0:	6811      	ldr	r1, [r2, #0]
 80051b2:	1855      	adds	r5, r2, r1
 80051b4:	42a5      	cmp	r5, r4
 80051b6:	d10b      	bne.n	80051d0 <_free_r+0x70>
 80051b8:	6824      	ldr	r4, [r4, #0]
 80051ba:	4421      	add	r1, r4
 80051bc:	1854      	adds	r4, r2, r1
 80051be:	42a3      	cmp	r3, r4
 80051c0:	6011      	str	r1, [r2, #0]
 80051c2:	d1e0      	bne.n	8005186 <_free_r+0x26>
 80051c4:	681c      	ldr	r4, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	6053      	str	r3, [r2, #4]
 80051ca:	4421      	add	r1, r4
 80051cc:	6011      	str	r1, [r2, #0]
 80051ce:	e7da      	b.n	8005186 <_free_r+0x26>
 80051d0:	d902      	bls.n	80051d8 <_free_r+0x78>
 80051d2:	230c      	movs	r3, #12
 80051d4:	6003      	str	r3, [r0, #0]
 80051d6:	e7d6      	b.n	8005186 <_free_r+0x26>
 80051d8:	6825      	ldr	r5, [r4, #0]
 80051da:	1961      	adds	r1, r4, r5
 80051dc:	428b      	cmp	r3, r1
 80051de:	bf04      	itt	eq
 80051e0:	6819      	ldreq	r1, [r3, #0]
 80051e2:	685b      	ldreq	r3, [r3, #4]
 80051e4:	6063      	str	r3, [r4, #4]
 80051e6:	bf04      	itt	eq
 80051e8:	1949      	addeq	r1, r1, r5
 80051ea:	6021      	streq	r1, [r4, #0]
 80051ec:	6054      	str	r4, [r2, #4]
 80051ee:	e7ca      	b.n	8005186 <_free_r+0x26>
 80051f0:	b003      	add	sp, #12
 80051f2:	bd30      	pop	{r4, r5, pc}
 80051f4:	200002a4 	.word	0x200002a4

080051f8 <sbrk_aligned>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	4e0e      	ldr	r6, [pc, #56]	; (8005234 <sbrk_aligned+0x3c>)
 80051fc:	460c      	mov	r4, r1
 80051fe:	6831      	ldr	r1, [r6, #0]
 8005200:	4605      	mov	r5, r0
 8005202:	b911      	cbnz	r1, 800520a <sbrk_aligned+0x12>
 8005204:	f000 f8bc 	bl	8005380 <_sbrk_r>
 8005208:	6030      	str	r0, [r6, #0]
 800520a:	4621      	mov	r1, r4
 800520c:	4628      	mov	r0, r5
 800520e:	f000 f8b7 	bl	8005380 <_sbrk_r>
 8005212:	1c43      	adds	r3, r0, #1
 8005214:	d00a      	beq.n	800522c <sbrk_aligned+0x34>
 8005216:	1cc4      	adds	r4, r0, #3
 8005218:	f024 0403 	bic.w	r4, r4, #3
 800521c:	42a0      	cmp	r0, r4
 800521e:	d007      	beq.n	8005230 <sbrk_aligned+0x38>
 8005220:	1a21      	subs	r1, r4, r0
 8005222:	4628      	mov	r0, r5
 8005224:	f000 f8ac 	bl	8005380 <_sbrk_r>
 8005228:	3001      	adds	r0, #1
 800522a:	d101      	bne.n	8005230 <sbrk_aligned+0x38>
 800522c:	f04f 34ff 	mov.w	r4, #4294967295
 8005230:	4620      	mov	r0, r4
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	200002a8 	.word	0x200002a8

08005238 <_malloc_r>:
 8005238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523c:	1ccd      	adds	r5, r1, #3
 800523e:	f025 0503 	bic.w	r5, r5, #3
 8005242:	3508      	adds	r5, #8
 8005244:	2d0c      	cmp	r5, #12
 8005246:	bf38      	it	cc
 8005248:	250c      	movcc	r5, #12
 800524a:	2d00      	cmp	r5, #0
 800524c:	4607      	mov	r7, r0
 800524e:	db01      	blt.n	8005254 <_malloc_r+0x1c>
 8005250:	42a9      	cmp	r1, r5
 8005252:	d905      	bls.n	8005260 <_malloc_r+0x28>
 8005254:	230c      	movs	r3, #12
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	2600      	movs	r6, #0
 800525a:	4630      	mov	r0, r6
 800525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005260:	4e2e      	ldr	r6, [pc, #184]	; (800531c <_malloc_r+0xe4>)
 8005262:	f000 f89d 	bl	80053a0 <__malloc_lock>
 8005266:	6833      	ldr	r3, [r6, #0]
 8005268:	461c      	mov	r4, r3
 800526a:	bb34      	cbnz	r4, 80052ba <_malloc_r+0x82>
 800526c:	4629      	mov	r1, r5
 800526e:	4638      	mov	r0, r7
 8005270:	f7ff ffc2 	bl	80051f8 <sbrk_aligned>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	4604      	mov	r4, r0
 8005278:	d14d      	bne.n	8005316 <_malloc_r+0xde>
 800527a:	6834      	ldr	r4, [r6, #0]
 800527c:	4626      	mov	r6, r4
 800527e:	2e00      	cmp	r6, #0
 8005280:	d140      	bne.n	8005304 <_malloc_r+0xcc>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	4631      	mov	r1, r6
 8005286:	4638      	mov	r0, r7
 8005288:	eb04 0803 	add.w	r8, r4, r3
 800528c:	f000 f878 	bl	8005380 <_sbrk_r>
 8005290:	4580      	cmp	r8, r0
 8005292:	d13a      	bne.n	800530a <_malloc_r+0xd2>
 8005294:	6821      	ldr	r1, [r4, #0]
 8005296:	3503      	adds	r5, #3
 8005298:	1a6d      	subs	r5, r5, r1
 800529a:	f025 0503 	bic.w	r5, r5, #3
 800529e:	3508      	adds	r5, #8
 80052a0:	2d0c      	cmp	r5, #12
 80052a2:	bf38      	it	cc
 80052a4:	250c      	movcc	r5, #12
 80052a6:	4629      	mov	r1, r5
 80052a8:	4638      	mov	r0, r7
 80052aa:	f7ff ffa5 	bl	80051f8 <sbrk_aligned>
 80052ae:	3001      	adds	r0, #1
 80052b0:	d02b      	beq.n	800530a <_malloc_r+0xd2>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	442b      	add	r3, r5
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	e00e      	b.n	80052d8 <_malloc_r+0xa0>
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	1b52      	subs	r2, r2, r5
 80052be:	d41e      	bmi.n	80052fe <_malloc_r+0xc6>
 80052c0:	2a0b      	cmp	r2, #11
 80052c2:	d916      	bls.n	80052f2 <_malloc_r+0xba>
 80052c4:	1961      	adds	r1, r4, r5
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	6025      	str	r5, [r4, #0]
 80052ca:	bf18      	it	ne
 80052cc:	6059      	strne	r1, [r3, #4]
 80052ce:	6863      	ldr	r3, [r4, #4]
 80052d0:	bf08      	it	eq
 80052d2:	6031      	streq	r1, [r6, #0]
 80052d4:	5162      	str	r2, [r4, r5]
 80052d6:	604b      	str	r3, [r1, #4]
 80052d8:	4638      	mov	r0, r7
 80052da:	f104 060b 	add.w	r6, r4, #11
 80052de:	f000 f865 	bl	80053ac <__malloc_unlock>
 80052e2:	f026 0607 	bic.w	r6, r6, #7
 80052e6:	1d23      	adds	r3, r4, #4
 80052e8:	1af2      	subs	r2, r6, r3
 80052ea:	d0b6      	beq.n	800525a <_malloc_r+0x22>
 80052ec:	1b9b      	subs	r3, r3, r6
 80052ee:	50a3      	str	r3, [r4, r2]
 80052f0:	e7b3      	b.n	800525a <_malloc_r+0x22>
 80052f2:	6862      	ldr	r2, [r4, #4]
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	bf0c      	ite	eq
 80052f8:	6032      	streq	r2, [r6, #0]
 80052fa:	605a      	strne	r2, [r3, #4]
 80052fc:	e7ec      	b.n	80052d8 <_malloc_r+0xa0>
 80052fe:	4623      	mov	r3, r4
 8005300:	6864      	ldr	r4, [r4, #4]
 8005302:	e7b2      	b.n	800526a <_malloc_r+0x32>
 8005304:	4634      	mov	r4, r6
 8005306:	6876      	ldr	r6, [r6, #4]
 8005308:	e7b9      	b.n	800527e <_malloc_r+0x46>
 800530a:	230c      	movs	r3, #12
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	4638      	mov	r0, r7
 8005310:	f000 f84c 	bl	80053ac <__malloc_unlock>
 8005314:	e7a1      	b.n	800525a <_malloc_r+0x22>
 8005316:	6025      	str	r5, [r4, #0]
 8005318:	e7de      	b.n	80052d8 <_malloc_r+0xa0>
 800531a:	bf00      	nop
 800531c:	200002a4 	.word	0x200002a4

08005320 <_realloc_r>:
 8005320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005324:	4680      	mov	r8, r0
 8005326:	4614      	mov	r4, r2
 8005328:	460e      	mov	r6, r1
 800532a:	b921      	cbnz	r1, 8005336 <_realloc_r+0x16>
 800532c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	4611      	mov	r1, r2
 8005332:	f7ff bf81 	b.w	8005238 <_malloc_r>
 8005336:	b92a      	cbnz	r2, 8005344 <_realloc_r+0x24>
 8005338:	f7ff ff12 	bl	8005160 <_free_r>
 800533c:	4625      	mov	r5, r4
 800533e:	4628      	mov	r0, r5
 8005340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005344:	f000 f838 	bl	80053b8 <_malloc_usable_size_r>
 8005348:	4284      	cmp	r4, r0
 800534a:	4607      	mov	r7, r0
 800534c:	d802      	bhi.n	8005354 <_realloc_r+0x34>
 800534e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005352:	d812      	bhi.n	800537a <_realloc_r+0x5a>
 8005354:	4621      	mov	r1, r4
 8005356:	4640      	mov	r0, r8
 8005358:	f7ff ff6e 	bl	8005238 <_malloc_r>
 800535c:	4605      	mov	r5, r0
 800535e:	2800      	cmp	r0, #0
 8005360:	d0ed      	beq.n	800533e <_realloc_r+0x1e>
 8005362:	42bc      	cmp	r4, r7
 8005364:	4622      	mov	r2, r4
 8005366:	4631      	mov	r1, r6
 8005368:	bf28      	it	cs
 800536a:	463a      	movcs	r2, r7
 800536c:	f7ff fed0 	bl	8005110 <memcpy>
 8005370:	4631      	mov	r1, r6
 8005372:	4640      	mov	r0, r8
 8005374:	f7ff fef4 	bl	8005160 <_free_r>
 8005378:	e7e1      	b.n	800533e <_realloc_r+0x1e>
 800537a:	4635      	mov	r5, r6
 800537c:	e7df      	b.n	800533e <_realloc_r+0x1e>
	...

08005380 <_sbrk_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d06      	ldr	r5, [pc, #24]	; (800539c <_sbrk_r+0x1c>)
 8005384:	2300      	movs	r3, #0
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	f7fc f9ec 	bl	8001768 <_sbrk>
 8005390:	1c43      	adds	r3, r0, #1
 8005392:	d102      	bne.n	800539a <_sbrk_r+0x1a>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	b103      	cbz	r3, 800539a <_sbrk_r+0x1a>
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	bd38      	pop	{r3, r4, r5, pc}
 800539c:	200002ac 	.word	0x200002ac

080053a0 <__malloc_lock>:
 80053a0:	4801      	ldr	r0, [pc, #4]	; (80053a8 <__malloc_lock+0x8>)
 80053a2:	f000 b811 	b.w	80053c8 <__retarget_lock_acquire_recursive>
 80053a6:	bf00      	nop
 80053a8:	200002b0 	.word	0x200002b0

080053ac <__malloc_unlock>:
 80053ac:	4801      	ldr	r0, [pc, #4]	; (80053b4 <__malloc_unlock+0x8>)
 80053ae:	f000 b80c 	b.w	80053ca <__retarget_lock_release_recursive>
 80053b2:	bf00      	nop
 80053b4:	200002b0 	.word	0x200002b0

080053b8 <_malloc_usable_size_r>:
 80053b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053bc:	1f18      	subs	r0, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bfbc      	itt	lt
 80053c2:	580b      	ldrlt	r3, [r1, r0]
 80053c4:	18c0      	addlt	r0, r0, r3
 80053c6:	4770      	bx	lr

080053c8 <__retarget_lock_acquire_recursive>:
 80053c8:	4770      	bx	lr

080053ca <__retarget_lock_release_recursive>:
 80053ca:	4770      	bx	lr

080053cc <_init>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr

080053d8 <_fini>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	bf00      	nop
 80053dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053de:	bc08      	pop	{r3}
 80053e0:	469e      	mov	lr, r3
 80053e2:	4770      	bx	lr
